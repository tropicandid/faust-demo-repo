"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TaxonomyControls = TaxonomyControls;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _utils = require("../../utils");

var _constants = require("../../constants");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
// Helper function to get the term id based on user input in terms `FormTokenField`.
const getTermIdByTermValue = (terms, termValue) => {
  var _terms$find, _terms$find2;

  // First we check for exact match by `term.id` or case sensitive `term.name` match.
  const termId = (termValue === null || termValue === void 0 ? void 0 : termValue.id) || ((_terms$find = terms.find(term => term.name === termValue)) === null || _terms$find === void 0 ? void 0 : _terms$find.id);

  if (termId) {
    return termId;
  }
  /**
   * Here we make an extra check for entered terms in a non case sensitive way,
   * to match user expectations, due to `FormTokenField` behaviour that shows
   * suggestions which are case insensitive.
   *
   * Although WP tries to discourage users to add terms with the same name (case insensitive),
   * it's still possible if you manually change the name, as long as the terms have different slugs.
   * In this edge case we always apply the first match from the terms list.
   */


  const termValueLower = termValue.toLocaleLowerCase();
  return (_terms$find2 = terms.find(term => term.name.toLocaleLowerCase() === termValueLower)) === null || _terms$find2 === void 0 ? void 0 : _terms$find2.id;
};

const useTaxonomyTerms = slug => {
  return (0, _data.useSelect)(select => {
    const terms = select(_coreData.store).getEntityRecords('taxonomy', slug, {
      context: 'view',
      per_page: _constants.MAX_FETCHED_TERMS
    });
    return {
      terms
    };
  }, [slug]);
};

function TaxonomyControls(_ref) {
  let {
    onChange,
    query
  } = _ref;
  const {
    postType,
    taxQuery
  } = query;
  const taxonomies = (0, _utils.useTaxonomies)(postType);

  if (!taxonomies || taxonomies.length === 0) {
    return null;
  }

  return (0, _element.createElement)(_element.Fragment, null, taxonomies.map(taxonomy => {
    const value = (taxQuery === null || taxQuery === void 0 ? void 0 : taxQuery[taxonomy.slug]) || [];

    const handleChange = newTermIds => onChange({
      taxQuery: { ...taxQuery,
        [taxonomy.slug]: newTermIds
      }
    });

    return (0, _element.createElement)(TaxonomyItem, {
      key: taxonomy.slug,
      taxonomy: taxonomy,
      value: value,
      onChange: handleChange
    });
  }));
}

function TaxonomyItem(_ref2) {
  let {
    taxonomy,
    value,
    onChange
  } = _ref2;
  const {
    terms
  } = useTaxonomyTerms(taxonomy.slug);

  if (!(terms !== null && terms !== void 0 && terms.length)) {
    return null;
  }

  const onTermsChange = newTermValues => {
    const termIds = new Set();

    for (const termValue of newTermValues) {
      const termId = getTermIdByTermValue(terms, termValue);

      if (termId) {
        termIds.add(termId);
      }
    }

    onChange(Array.from(termIds));
  }; // Selects only the existing term ids in proper format to be
  // used in `FormTokenField`. This prevents the component from
  // crashing in the editor, when non existing term ids were provided.


  const taxQueryValue = value.map(termId => terms.find(t => t.id === termId)).filter(Boolean).map(term => ({
    id: term.id,
    value: term.name
  }));
  return (0, _element.createElement)("div", {
    className: "block-library-query-inspector__taxonomy-control"
  }, (0, _element.createElement)(_components.FormTokenField, {
    label: taxonomy.name,
    value: taxQueryValue,
    suggestions: terms.map(t => t.name),
    onChange: onTermsChange,
    __experimentalShowHowTo: false
  }));
}
//# sourceMappingURL=taxonomy-controls.js.map