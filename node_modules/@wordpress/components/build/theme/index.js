"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _colord = require("colord");

var _a11y = _interopRequireDefault(require("colord/plugins/a11y"));

var _names = _interopRequireDefault(require("colord/plugins/names"));

var _styles = require("./styles");

/**
 * External dependencies
 */
(0, _colord.extend)([_names.default, _a11y.default]);
/**
 * `Theme` allows defining theme variables for components in the `@wordpress/components` package.
 *
 * Multiple `Theme` components can be nested in order to override specific theme variables.
 *
 *
 * @example
 * ```jsx
 * import { __experimentalTheme as Theme } from '@wordpress/components';
 *
 * const Example = () => {
 *   return (
 *     <Theme accent="red">
 *       <Button variant="primary">I'm red</Button>
 *       <Theme accent="blue">
 *         <Button variant="primary">I'm blue</Button>
 *       </Theme>
 *     </Theme>
 *   );
 * };
 * ```
 */

function Theme(props) {
  const {
    accent
  } = props;

  if (accent && !(0, _colord.colord)(accent).isValid()) {
    // eslint-disable-next-line no-console
    console.warn(`wp.components.Theme: "${accent}" is not a valid color value for the 'accent' prop.`);
  }

  return (0, _element.createElement)(_styles.Wrapper, props);
}

var _default = Theme;
exports.default = _default;
//# sourceMappingURL=index.js.map