import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { hasBlockSupport } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import TextDecorationControl from '../components/text-decoration-control';
import useSetting from '../components/use-setting';
import { cleanEmptyObject } from './utils';
/**
 * Key within block settings' supports array indicating support for text
 * decorations e.g. settings found in `block.json`.
 */

export const TEXT_DECORATION_SUPPORT_KEY = 'typography.__experimentalTextDecoration';
/**
 * Inspector control panel containing the text decoration options.
 *
 * @param {Object} props Block properties.
 *
 * @return {WPElement} Text decoration edit element.
 */

export function TextDecorationEdit(props) {
  var _style$typography;

  const {
    attributes: {
      style
    },
    setAttributes
  } = props;

  function onChange(newDecoration) {
    setAttributes({
      style: cleanEmptyObject({ ...style,
        typography: { ...(style === null || style === void 0 ? void 0 : style.typography),
          textDecoration: newDecoration
        }
      })
    });
  }

  return createElement(TextDecorationControl, {
    value: style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.textDecoration,
    onChange: onChange,
    size: "__unstable-large"
  });
}
/**
 * Checks if text-decoration settings have been disabled.
 *
 * @param {string} name Name of the block.
 *
 * @return {boolean} Whether or not the setting is disabled.
 */

export function useIsTextDecorationDisabled() {
  let {
    name: blockName
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const notSupported = !hasBlockSupport(blockName, TEXT_DECORATION_SUPPORT_KEY);
  const hasTextDecoration = useSetting('typography.textDecoration');
  return notSupported || !hasTextDecoration;
}
/**
 * Checks if there is a current value set for the text decoration block support.
 *
 * @param {Object} props Block props.
 * @return {boolean}     Whether or not the block has a text decoration set.
 */

export function hasTextDecorationValue(props) {
  var _props$attributes$sty, _props$attributes$sty2;

  return !!((_props$attributes$sty = props.attributes.style) !== null && _props$attributes$sty !== void 0 && (_props$attributes$sty2 = _props$attributes$sty.typography) !== null && _props$attributes$sty2 !== void 0 && _props$attributes$sty2.textDecoration);
}
/**
 * Resets the text decoration block support attribute. This can be used when
 * disabling the text decoration support controls for a block via a progressive
 * discovery panel.
 *
 * @param {Object} props               Block props.
 * @param {Object} props.attributes    Block's attributes.
 * @param {Object} props.setAttributes Function to set block's attributes.
 */

export function resetTextDecoration(_ref) {
  let {
    attributes = {},
    setAttributes
  } = _ref;
  const {
    style
  } = attributes;
  setAttributes({
    style: cleanEmptyObject({ ...style,
      typography: { ...(style === null || style === void 0 ? void 0 : style.typography),
        textDecoration: undefined
      }
    })
  });
}
//# sourceMappingURL=text-decoration.js.map