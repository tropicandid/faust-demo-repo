import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { withSelect } from '@wordpress/data';
import { getDefaultBlockName } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import DefaultBlockAppender from '../default-block-appender';
import styles from './style.scss';
import { store as blockEditorStore } from '../../store';

function BlockListAppender(_ref) {
  let {
    blockClientIds,
    rootClientId,
    canInsertDefaultBlock,
    isLocked,
    renderAppender: CustomAppender,
    showSeparator
  } = _ref;

  if (isLocked) {
    return null;
  }

  if (CustomAppender) {
    return createElement(CustomAppender, {
      showSeparator: showSeparator
    });
  }

  if (canInsertDefaultBlock) {
    return createElement(DefaultBlockAppender, {
      rootClientId: rootClientId,
      lastBlockClientId: blockClientIds[blockClientIds.length - 1],
      containerStyle: styles.blockListAppender,
      placeholder: blockClientIds.length > 0 ? '' : null,
      showSeparator: showSeparator
    });
  }

  return null;
}

export default withSelect((select, _ref2) => {
  let {
    rootClientId
  } = _ref2;
  const {
    getBlockOrder,
    canInsertBlockType,
    getTemplateLock
  } = select(blockEditorStore);
  return {
    isLocked: !!getTemplateLock(rootClientId),
    blockClientIds: getBlockOrder(rootClientId),
    canInsertDefaultBlock: canInsertBlockType(getDefaultBlockName(), rootClientId)
  };
})(BlockListAppender);
//# sourceMappingURL=index.native.js.map