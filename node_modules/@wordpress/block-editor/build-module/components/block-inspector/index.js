import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { getBlockType, getUnregisteredTypeHandlerName, hasBlockSupport, store as blocksStore } from '@wordpress/blocks';
import { PanelBody, __experimentalUseSlotFills as useSlotFills, FlexItem, __experimentalHStack as HStack, __experimentalVStack as VStack, Button } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { useMemo, useCallback } from '@wordpress/element';
/**
 * Internal dependencies
 */

import SkipToSelectedBlock from '../skip-to-selected-block';
import BlockCard from '../block-card';
import { default as InspectorControls, InspectorAdvancedControls } from '../inspector-controls';
import BlockStyles from '../block-styles';
import MultiSelectionInspector from '../multi-selection-inspector';
import DefaultStylePicker from '../default-style-picker';
import BlockVariationTransforms from '../block-variation-transforms';
import useBlockDisplayInformation from '../use-block-display-information';
import { store as blockEditorStore } from '../../store';
import BlockIcon from '../block-icon';

function useContentBlocks(blockTypes, block) {
  const contenBlocksObjectAux = useMemo(() => {
    return blockTypes.reduce((result, blockType) => {
      if (blockType.name !== 'core/list-item' && Object.entries(blockType.attributes).some(_ref => {
        let [, {
          __experimentalRole
        }] = _ref;
        return __experimentalRole === 'content';
      })) {
        result[blockType.name] = true;
      }

      return result;
    }, {});
  }, [blockTypes]);
  const isContentBlock = useCallback(blockName => {
    return !!contenBlocksObjectAux[blockName];
  }, [blockTypes]);
  return useMemo(() => {
    return getContentBlocks([block], isContentBlock);
  }, [block, isContentBlock]);
}

function getContentBlocks(blocks, isContentBlock) {
  const result = [];

  for (const block of blocks) {
    if (isContentBlock(block.name)) {
      result.push(block);
    }

    result.push(...getContentBlocks(block.innerBlocks, isContentBlock));
  }

  return result;
}

function BlockNavigationButton(_ref2) {
  let {
    blockTypes,
    block,
    selectedBlock
  } = _ref2;
  const {
    selectBlock
  } = useDispatch(blockEditorStore);
  const blockType = blockTypes.find(_ref3 => {
    let {
      name
    } = _ref3;
    return name === block.name;
  });
  const isSelected = selectedBlock && selectedBlock.clientId === block.clientId;
  return createElement(Button, {
    isPressed: isSelected,
    onClick: () => selectBlock(block.clientId)
  }, createElement(HStack, {
    justify: "flex-start"
  }, createElement(BlockIcon, {
    icon: blockType.icon
  }), createElement(FlexItem, null, blockType.title)));
}

function BlockInspectorLockedBlocks(_ref4) {
  let {
    topLevelLockedBlock
  } = _ref4;
  const {
    blockTypes,
    block,
    selectedBlock
  } = useSelect(select => {
    return {
      blockTypes: select(blocksStore).getBlockTypes(),
      block: select(blockEditorStore).getBlock(topLevelLockedBlock),
      selectedBlock: select(blockEditorStore).getSelectedBlock()
    };
  }, [topLevelLockedBlock]);
  const blockInformation = useBlockDisplayInformation(topLevelLockedBlock);
  const contentBlocks = useContentBlocks(blockTypes, block);
  return createElement("div", {
    className: "block-editor-block-inspector"
  }, createElement(BlockCard, blockInformation), createElement(BlockVariationTransforms, {
    blockClientId: topLevelLockedBlock
  }), createElement(VStack, {
    spacing: 1,
    padding: 4,
    className: "block-editor-block-inspector__block-buttons-container"
  }, createElement("h2", {
    className: "block-editor-block-card__title"
  }, __('Content')), contentBlocks.map(contentBlock => createElement(BlockNavigationButton, {
    selectedBlock: selectedBlock,
    key: contentBlock.clientId,
    block: contentBlock,
    blockTypes: blockTypes
  }))));
}

const BlockInspector = _ref5 => {
  let {
    showNoBlockSelectedMessage = true
  } = _ref5;
  const {
    count,
    selectedBlockName,
    selectedBlockClientId,
    blockType,
    topLevelLockedBlock
  } = useSelect(select => {
    const {
      getSelectedBlockClientId,
      getSelectedBlockCount,
      getBlockName,
      __unstableGetContentLockingParent,
      getTemplateLock
    } = select(blockEditorStore);

    const _selectedBlockClientId = getSelectedBlockClientId();

    const _selectedBlockName = _selectedBlockClientId && getBlockName(_selectedBlockClientId);

    const _blockType = _selectedBlockName && getBlockType(_selectedBlockName);

    return {
      count: getSelectedBlockCount(),
      selectedBlockClientId: _selectedBlockClientId,
      selectedBlockName: _selectedBlockName,
      blockType: _blockType,
      topLevelLockedBlock: __unstableGetContentLockingParent(_selectedBlockClientId) || (getTemplateLock(_selectedBlockClientId) === 'contentOnly' ? _selectedBlockClientId : undefined)
    };
  }, []);

  if (count > 1) {
    return createElement("div", {
      className: "block-editor-block-inspector"
    }, createElement(MultiSelectionInspector, null), createElement(InspectorControls.Slot, null), createElement(InspectorControls.Slot, {
      __experimentalGroup: "color",
      label: __('Color'),
      className: "color-block-support-panel__inner-wrapper"
    }), createElement(InspectorControls.Slot, {
      __experimentalGroup: "typography",
      label: __('Typography')
    }), createElement(InspectorControls.Slot, {
      __experimentalGroup: "dimensions",
      label: __('Dimensions')
    }), createElement(InspectorControls.Slot, {
      __experimentalGroup: "border",
      label: __('Border')
    }));
  }

  const isSelectedBlockUnregistered = selectedBlockName === getUnregisteredTypeHandlerName();
  /*
   * If the selected block is of an unregistered type, avoid showing it as an actual selection
   * because we want the user to focus on the unregistered block warning, not block settings.
   */

  if (!blockType || !selectedBlockClientId || isSelectedBlockUnregistered) {
    if (showNoBlockSelectedMessage) {
      return createElement("span", {
        className: "block-editor-block-inspector__no-blocks"
      }, __('No block selected.'));
    }

    return null;
  }

  if (topLevelLockedBlock) {
    return createElement(BlockInspectorLockedBlocks, {
      topLevelLockedBlock: topLevelLockedBlock
    });
  }

  return createElement(BlockInspectorSingleBlock, {
    clientId: selectedBlockClientId,
    blockName: blockType.name
  });
};

const BlockInspectorSingleBlock = _ref6 => {
  let {
    clientId,
    blockName
  } = _ref6;
  const hasBlockStyles = useSelect(select => {
    const {
      getBlockStyles
    } = select(blocksStore);
    const blockStyles = getBlockStyles(blockName);
    return blockStyles && blockStyles.length > 0;
  }, [blockName]);
  const blockInformation = useBlockDisplayInformation(clientId);
  return createElement("div", {
    className: "block-editor-block-inspector"
  }, createElement(BlockCard, blockInformation), createElement(BlockVariationTransforms, {
    blockClientId: clientId
  }), hasBlockStyles && createElement("div", null, createElement(PanelBody, {
    title: __('Styles')
  }, createElement(BlockStyles, {
    clientId: clientId
  }), hasBlockSupport(blockName, 'defaultStylePicker', true) && createElement(DefaultStylePicker, {
    blockName: blockName
  }))), createElement(InspectorControls.Slot, null), createElement(InspectorControls.Slot, {
    __experimentalGroup: "color",
    label: __('Color'),
    className: "color-block-support-panel__inner-wrapper"
  }), createElement(InspectorControls.Slot, {
    __experimentalGroup: "typography",
    label: __('Typography')
  }), createElement(InspectorControls.Slot, {
    __experimentalGroup: "dimensions",
    label: __('Dimensions')
  }), createElement(InspectorControls.Slot, {
    __experimentalGroup: "border",
    label: __('Border')
  }), createElement("div", null, createElement(AdvancedControls, null)), createElement(SkipToSelectedBlock, {
    key: "back"
  }));
};

const AdvancedControls = () => {
  const fills = useSlotFills(InspectorAdvancedControls.slotName);
  const hasFills = Boolean(fills && fills.length);

  if (!hasFills) {
    return null;
  }

  return createElement(PanelBody, {
    className: "block-editor-block-inspector__advanced",
    title: __('Advanced'),
    initialOpen: false
  }, createElement(InspectorControls.Slot, {
    __experimentalGroup: "advanced"
  }));
};
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-inspector/README.md
 */


export default BlockInspector;
//# sourceMappingURL=index.js.map