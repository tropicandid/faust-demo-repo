import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
import { isEmpty } from 'lodash';
/**
 * WordPress dependencies
 */

import { __experimentalSpacer as Spacer, __experimentalToolsPanel as ToolsPanel } from '@wordpress/components';
import { useRegistry } from '@wordpress/data';
import { useInstanceId } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import ColorGradientSettingsDropdown from './dropdown';
import useSetting from '../use-setting';
import useCommonSingleMultipleSelects from './use-common-single-multiple-selects';
import useMultipleOriginColorsAndGradients from './use-multiple-origin-colors-and-gradients';
const colorsAndGradientKeys = ['colors', 'disableCustomColors', 'gradients', 'disableCustomGradients'];
export const PanelColorGradientSettingsInner = _ref => {
  let {
    className,
    colors,
    gradients,
    disableCustomColors,
    disableCustomGradients,
    children,
    settings,
    title,
    showTitle = true,
    __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar,
    enableAlpha
  } = _ref;
  const panelId = useInstanceId(PanelColorGradientSettingsInner);
  const {
    batch
  } = useRegistry();

  if (isEmpty(colors) && isEmpty(gradients) && disableCustomColors && disableCustomGradients && settings !== null && settings !== void 0 && settings.every(setting => isEmpty(setting.colors) && isEmpty(setting.gradients) && (setting.disableCustomColors === undefined || setting.disableCustomColors) && (setting.disableCustomGradients === undefined || setting.disableCustomGradients))) {
    return null;
  }

  return createElement(ToolsPanel, {
    className: classnames('block-editor-panel-color-gradient-settings', className),
    label: showTitle ? title : undefined,
    resetAll: () => {
      batch(() => {
        settings.forEach(_ref2 => {
          let {
            colorValue,
            gradientValue,
            onColorChange,
            onGradientChange
          } = _ref2;

          if (colorValue) {
            onColorChange();
          } else if (gradientValue) {
            onGradientChange();
          }
        });
      });
    },
    panelId: panelId,
    __experimentalFirstVisibleItemClass: "first",
    __experimentalLastVisibleItemClass: "last"
  }, createElement(ColorGradientSettingsDropdown, {
    settings: settings,
    panelId: panelId,
    colors,
    gradients,
    disableCustomColors,
    disableCustomGradients,
    __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar,
    enableAlpha
  }), !!children && createElement(Fragment, null, createElement(Spacer, {
    marginY: 4
  }), " ", children));
};

const PanelColorGradientSettingsSingleSelect = props => {
  const colorGradientSettings = useCommonSingleMultipleSelects();
  colorGradientSettings.colors = useSetting('color.palette');
  colorGradientSettings.gradients = useSetting('color.gradients');
  return createElement(PanelColorGradientSettingsInner, _extends({}, colorGradientSettings, props));
};

const PanelColorGradientSettingsMultipleSelect = props => {
  const colorGradientSettings = useMultipleOriginColorsAndGradients();
  return createElement(PanelColorGradientSettingsInner, _extends({}, colorGradientSettings, props));
};

const PanelColorGradientSettings = props => {
  if (colorsAndGradientKeys.every(key => props.hasOwnProperty(key))) {
    return createElement(PanelColorGradientSettingsInner, props);
  }

  if (props.__experimentalHasMultipleOrigins) {
    return createElement(PanelColorGradientSettingsMultipleSelect, props);
  }

  return createElement(PanelColorGradientSettingsSingleSelect, props);
};

export default PanelColorGradientSettings;
//# sourceMappingURL=panel-color-gradient-settings.js.map