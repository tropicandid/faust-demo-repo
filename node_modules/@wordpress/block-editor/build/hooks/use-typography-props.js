"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTypographyClassesAndStyles = getTypographyClassesAndStyles;

var _lodash = require("lodash");

var _classnames = _interopRequireDefault(require("classnames"));

var _style = require("./style");

var _fontSizes = require("../components/font-sizes");

var _fluidUtils = require("../components/font-sizes/fluid-utils");

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */
// This utility is intended to assist where the serialization of the typography
// block support is being skipped for a block but the typography related CSS
// styles still need to be generated so they can be applied to inner elements.

/**
 * Provides the CSS class names and inline styles for a block's typography support
 * attributes.
 *
 * @param {Object}  attributes            Block attributes.
 * @param {boolean} isFluidFontSizeActive Whether the function should try to convert font sizes to fluid values.
 *
 * @return {Object} Typography block support derived CSS classes & styles.
 */
function getTypographyClassesAndStyles(attributes, isFluidFontSizeActive) {
  var _attributes$style;

  let typographyStyles = (attributes === null || attributes === void 0 ? void 0 : (_attributes$style = attributes.style) === null || _attributes$style === void 0 ? void 0 : _attributes$style.typography) || {};

  if (isFluidFontSizeActive) {
    var _attributes$style2, _attributes$style2$ty;

    typographyStyles = { ...typographyStyles,
      fontSize: (0, _fluidUtils.getComputedFluidTypographyValue)({
        fontSize: attributes === null || attributes === void 0 ? void 0 : (_attributes$style2 = attributes.style) === null || _attributes$style2 === void 0 ? void 0 : (_attributes$style2$ty = _attributes$style2.typography) === null || _attributes$style2$ty === void 0 ? void 0 : _attributes$style2$ty.fontSize
      })
    };
  }

  const style = (0, _style.getInlineStyles)({
    typography: typographyStyles
  });
  const fontFamilyClassName = !!(attributes !== null && attributes !== void 0 && attributes.fontFamily) ? `has-${(0, _lodash.kebabCase)(attributes.fontFamily)}-font-family` : '';
  const className = (0, _classnames.default)(fontFamilyClassName, (0, _fontSizes.getFontSizeClass)(attributes === null || attributes === void 0 ? void 0 : attributes.fontSize));
  return {
    className,
    style
  };
}
//# sourceMappingURL=use-typography-props.js.map