"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LINE_HEIGHT_SUPPORT_KEY = void 0;
exports.LineHeightEdit = LineHeightEdit;
exports.hasLineHeightValue = hasLineHeightValue;
exports.resetLineHeight = resetLineHeight;
exports.useIsLineHeightDisabled = useIsLineHeightDisabled;

var _element = require("@wordpress/element");

var _blocks = require("@wordpress/blocks");

var _lineHeightControl = _interopRequireDefault(require("../components/line-height-control"));

var _utils = require("./utils");

var _useSetting = _interopRequireDefault(require("../components/use-setting"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const LINE_HEIGHT_SUPPORT_KEY = 'typography.lineHeight';
/**
 * Inspector control panel containing the line height related configuration
 *
 * @param {Object} props
 *
 * @return {WPElement} Line height edit element.
 */

exports.LINE_HEIGHT_SUPPORT_KEY = LINE_HEIGHT_SUPPORT_KEY;

function LineHeightEdit(props) {
  var _style$typography;

  const {
    attributes: {
      style
    },
    setAttributes
  } = props;

  const onChange = newLineHeightValue => {
    const newStyle = { ...style,
      typography: { ...(style === null || style === void 0 ? void 0 : style.typography),
        lineHeight: newLineHeightValue
      }
    };
    setAttributes({
      style: (0, _utils.cleanEmptyObject)(newStyle)
    });
  };

  return (0, _element.createElement)(_lineHeightControl.default, {
    __unstableInputWidth: "100%",
    __nextHasNoMarginBottom: true,
    value: style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.lineHeight,
    onChange: onChange,
    size: "__unstable-large"
  });
}
/**
 * Custom hook that checks if line-height settings have been disabled.
 *
 * @param {string} name The name of the block.
 * @return {boolean} Whether setting is disabled.
 */


function useIsLineHeightDisabled() {
  let {
    name: blockName
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const isDisabled = !(0, _useSetting.default)('typography.lineHeight');
  return !(0, _blocks.hasBlockSupport)(blockName, LINE_HEIGHT_SUPPORT_KEY) || isDisabled;
}
/**
 * Checks if there is a current value set for the line height block support.
 *
 * @param {Object} props Block props.
 * @return {boolean}     Whether or not the block has a line height value set.
 */


function hasLineHeightValue(props) {
  var _props$attributes$sty, _props$attributes$sty2;

  return !!((_props$attributes$sty = props.attributes.style) !== null && _props$attributes$sty !== void 0 && (_props$attributes$sty2 = _props$attributes$sty.typography) !== null && _props$attributes$sty2 !== void 0 && _props$attributes$sty2.lineHeight);
}
/**
 * Resets the line height block support attribute. This can be used when
 * disabling the line height support controls for a block via a progressive
 * discovery panel.
 *
 * @param {Object} props               Block props.
 * @param {Object} props.attributes    Block's attributes.
 * @param {Object} props.setAttributes Function to set block's attributes.
 */


function resetLineHeight(_ref) {
  let {
    attributes = {},
    setAttributes
  } = _ref;
  const {
    style
  } = attributes;
  setAttributes({
    style: (0, _utils.cleanEmptyObject)({ ...style,
      typography: { ...(style === null || style === void 0 ? void 0 : style.typography),
        lineHeight: undefined
      }
    })
  });
}
//# sourceMappingURL=line-height.js.map