"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _colord = require("colord");

var _names = _interopRequireDefault(require("colord/plugins/names"));

var _blocks = require("@wordpress/blocks");

var _compose = require("@wordpress/compose");

var _hooks = require("@wordpress/hooks");

var _data = require("@wordpress/data");

var _components = require("../components");

var _blockList = _interopRequireDefault(require("../components/block-list"));

var _duotone = require("../components/duotone");

var _store = require("../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const EMPTY_ARRAY = [];
(0, _colord.extend)([_names.default]);
/**
 * SVG and stylesheet needed for rendering the duotone filter.
 *
 * @param {Object}           props          Duotone props.
 * @param {string}           props.selector Selector to apply the filter to.
 * @param {string}           props.id       Unique id for this duotone filter.
 * @param {string[]|"unset"} props.colors   Array of RGB color strings ordered from dark to light.
 *
 * @return {WPElement} Duotone element.
 */

function InlineDuotone(_ref) {
  let {
    selector,
    id,
    colors
  } = _ref;

  if (colors === 'unset') {
    return (0, _element.createElement)(_duotone.__unstableDuotoneUnsetStylesheet, {
      selector: selector
    });
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_duotone.__unstableDuotoneFilter, {
    id: id,
    colors: colors
  }), (0, _element.createElement)(_duotone.__unstableDuotoneStylesheet, {
    id: id,
    selector: selector
  }));
}

function useMultiOriginPresets(_ref2) {
  let {
    presetSetting,
    defaultSetting
  } = _ref2;
  const disableDefault = !(0, _components.useSetting)(defaultSetting);
  const userPresets = (0, _components.useSetting)(`${presetSetting}.custom`) || EMPTY_ARRAY;
  const themePresets = (0, _components.useSetting)(`${presetSetting}.theme`) || EMPTY_ARRAY;
  const defaultPresets = (0, _components.useSetting)(`${presetSetting}.default`) || EMPTY_ARRAY;
  return (0, _element.useMemo)(() => [...userPresets, ...themePresets, ...(disableDefault ? EMPTY_ARRAY : defaultPresets)], [disableDefault, userPresets, themePresets, defaultPresets]);
}

function DuotonePanel(_ref3) {
  var _style$color;

  let {
    attributes,
    setAttributes
  } = _ref3;
  const style = attributes === null || attributes === void 0 ? void 0 : attributes.style;
  const duotone = style === null || style === void 0 ? void 0 : (_style$color = style.color) === null || _style$color === void 0 ? void 0 : _style$color.duotone;
  const duotonePalette = useMultiOriginPresets({
    presetSetting: 'color.duotone',
    defaultSetting: 'color.defaultDuotone'
  });
  const colorPalette = useMultiOriginPresets({
    presetSetting: 'color.palette',
    defaultSetting: 'color.defaultPalette'
  });
  const disableCustomColors = !(0, _components.useSetting)('color.custom');
  const disableCustomDuotone = !(0, _components.useSetting)('color.customDuotone') || (colorPalette === null || colorPalette === void 0 ? void 0 : colorPalette.length) === 0 && disableCustomColors;

  if ((duotonePalette === null || duotonePalette === void 0 ? void 0 : duotonePalette.length) === 0 && disableCustomDuotone) {
    return null;
  }

  return (0, _element.createElement)(_components.BlockControls, {
    group: "block",
    __experimentalShareWithChildBlocks: true
  }, (0, _element.createElement)(_components.__experimentalDuotoneControl, {
    duotonePalette: duotonePalette,
    colorPalette: colorPalette,
    disableCustomDuotone: disableCustomDuotone,
    disableCustomColors: disableCustomColors,
    value: duotone,
    onChange: newDuotone => {
      const newStyle = { ...style,
        color: { ...(style === null || style === void 0 ? void 0 : style.color),
          duotone: newDuotone
        }
      };
      setAttributes({
        style: newStyle
      });
    }
  }));
}
/**
 * Filters registered block settings, extending attributes to include
 * the `duotone` attribute.
 *
 * @param {Object} settings Original block settings.
 *
 * @return {Object} Filtered block settings.
 */


function addDuotoneAttributes(settings) {
  if (!(0, _blocks.hasBlockSupport)(settings, 'color.__experimentalDuotone')) {
    return settings;
  } // Allow blocks to specify their own attribute definition with default
  // values if needed.


  if (!settings.attributes.style) {
    Object.assign(settings.attributes, {
      style: {
        type: 'object'
      }
    });
  }

  return settings;
}
/**
 * Override the default edit UI to include toolbar controls for duotone if the
 * block supports duotone.
 *
 * @param {Function} BlockEdit Original component.
 *
 * @return {Function} Wrapped component.
 */


const withDuotoneControls = (0, _compose.createHigherOrderComponent)(BlockEdit => props => {
  const hasDuotoneSupport = (0, _blocks.hasBlockSupport)(props.name, 'color.__experimentalDuotone');
  const isContentLocked = (0, _data.useSelect)(select => {
    return select(_store.store).__unstableGetContentLockingParent(props.clientId);
  }, [props.clientId]);
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(BlockEdit, props), hasDuotoneSupport && !isContentLocked && (0, _element.createElement)(DuotonePanel, props));
}, 'withDuotoneControls');
/**
 * Function that scopes a selector with another one. This works a bit like
 * SCSS nesting except the `&` operator isn't supported.
 *
 * @example
 * ```js
 * const scope = '.a, .b .c';
 * const selector = '> .x, .y';
 * const merged = scopeSelector( scope, selector );
 * // merged is '.a > .x, .a .y, .b .c > .x, .b .c .y'
 * ```
 *
 * @param {string} scope    Selector to scope to.
 * @param {string} selector Original selector.
 *
 * @return {string} Scoped selector.
 */

function scopeSelector(scope, selector) {
  const scopes = scope.split(',');
  const selectors = selector.split(',');
  const selectorsScoped = [];
  scopes.forEach(outer => {
    selectors.forEach(inner => {
      selectorsScoped.push(`${outer.trim()} ${inner.trim()}`);
    });
  });
  return selectorsScoped.join(', ');
}
/**
 * Override the default block element to include duotone styles.
 *
 * @param {Function} BlockListBlock Original component.
 *
 * @return {Function} Wrapped component.
 */


const withDuotoneStyles = (0, _compose.createHigherOrderComponent)(BlockListBlock => props => {
  var _props$attributes, _props$attributes$sty, _props$attributes$sty2;

  const duotoneSupport = (0, _blocks.getBlockSupport)(props.name, 'color.__experimentalDuotone');
  const colors = props === null || props === void 0 ? void 0 : (_props$attributes = props.attributes) === null || _props$attributes === void 0 ? void 0 : (_props$attributes$sty = _props$attributes.style) === null || _props$attributes$sty === void 0 ? void 0 : (_props$attributes$sty2 = _props$attributes$sty.color) === null || _props$attributes$sty2 === void 0 ? void 0 : _props$attributes$sty2.duotone;

  if (!duotoneSupport || !colors) {
    return (0, _element.createElement)(BlockListBlock, props);
  }

  const id = `wp-duotone-${(0, _compose.useInstanceId)(BlockListBlock)}`; // Extra .editor-styles-wrapper specificity is needed in the editor
  // since we're not using inline styles to apply the filter. We need to
  // override duotone applied by global styles and theme.json.

  const selectorsGroup = scopeSelector(`.editor-styles-wrapper .${id}`, duotoneSupport);
  const className = (0, _classnames.default)(props === null || props === void 0 ? void 0 : props.className, id);
  const element = (0, _element.useContext)(_blockList.default.__unstableElementContext);
  return (0, _element.createElement)(_element.Fragment, null, element && (0, _element.createPortal)((0, _element.createElement)(InlineDuotone, {
    selector: selectorsGroup,
    id: id,
    colors: colors
  }), element), (0, _element.createElement)(BlockListBlock, (0, _extends2.default)({}, props, {
    className: className
  })));
}, 'withDuotoneStyles');
(0, _hooks.addFilter)('blocks.registerBlockType', 'core/editor/duotone/add-attributes', addDuotoneAttributes);
(0, _hooks.addFilter)('editor.BlockEdit', 'core/editor/duotone/with-editor-controls', withDuotoneControls);
(0, _hooks.addFilter)('editor.BlockListBlock', 'core/editor/duotone/with-styles', withDuotoneStyles);
//# sourceMappingURL=duotone.js.map