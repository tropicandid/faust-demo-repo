"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaddingEdit = PaddingEdit;
exports.PaddingVisualizer = PaddingVisualizer;
exports.hasPaddingSupport = hasPaddingSupport;
exports.hasPaddingValue = hasPaddingValue;
exports.resetPadding = resetPadding;
exports.useIsPaddingDisabled = useIsPaddingDisabled;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _isShallowEqual = _interopRequireDefault(require("@wordpress/is-shallow-equal"));

var _useSetting = _interopRequireDefault(require("../components/use-setting"));

var _dimensions = require("./dimensions");

var _utils = require("./utils");

var _blockPopover = _interopRequireDefault(require("../components/block-popover"));

var _spacingSizesControl = _interopRequireDefault(require("../components/spacing-sizes-control"));

var _utils2 = require("../components/spacing-sizes-control/utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Determines if there is padding support.
 *
 * @param {string|Object} blockType Block name or Block Type object.
 *
 * @return {boolean} Whether there is support.
 */
function hasPaddingSupport(blockType) {
  const support = (0, _blocks.getBlockSupport)(blockType, _dimensions.SPACING_SUPPORT_KEY);
  return !!(true === support || support !== null && support !== void 0 && support.padding);
}
/**
 * Checks if there is a current value in the padding block support attributes.
 *
 * @param {Object} props Block props.
 * @return {boolean}      Whether or not the block has a padding value set.
 */


function hasPaddingValue(props) {
  var _props$attributes$sty, _props$attributes$sty2;

  return ((_props$attributes$sty = props.attributes.style) === null || _props$attributes$sty === void 0 ? void 0 : (_props$attributes$sty2 = _props$attributes$sty.spacing) === null || _props$attributes$sty2 === void 0 ? void 0 : _props$attributes$sty2.padding) !== undefined;
}
/**
 * Resets the padding block support attributes. This can be used when disabling
 * the padding support controls for a block via a `ToolsPanel`.
 *
 * @param {Object} props               Block props.
 * @param {Object} props.attributes    Block's attributes.
 * @param {Object} props.setAttributes Function to set block's attributes.
 */


function resetPadding(_ref) {
  let {
    attributes = {},
    setAttributes
  } = _ref;
  const {
    style
  } = attributes;
  setAttributes({
    style: (0, _utils.cleanEmptyObject)({ ...style,
      spacing: { ...(style === null || style === void 0 ? void 0 : style.spacing),
        padding: undefined
      }
    })
  });
}
/**
 * Custom hook that checks if padding settings have been disabled.
 *
 * @param {string} name The name of the block.
 *
 * @return {boolean} Whether padding setting is disabled.
 */


function useIsPaddingDisabled() {
  let {
    name: blockName
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const isDisabled = !(0, _useSetting.default)('spacing.padding');
  const isInvalid = !(0, _dimensions.useIsDimensionsSupportValid)(blockName, 'padding');
  return !hasPaddingSupport(blockName) || isDisabled || isInvalid;
}
/**
 * Inspector control panel containing the padding related configuration
 *
 * @param {Object} props
 *
 * @return {WPElement} Padding edit element.
 */


function PaddingEdit(props) {
  var _style$spacing, _style$spacing2;

  const {
    name: blockName,
    attributes: {
      style
    },
    setAttributes,
    onMouseOver,
    onMouseOut
  } = props;
  const spacingSizes = (0, _useSetting.default)('spacing.spacingSizes');
  const units = (0, _components.__experimentalUseCustomUnits)({
    availableUnits: (0, _useSetting.default)('spacing.units') || ['%', 'px', 'em', 'rem', 'vw']
  });
  const sides = (0, _dimensions.useCustomSides)(blockName, 'padding');
  const splitOnAxis = sides && sides.some(side => _dimensions.AXIAL_SIDES.includes(side));

  if (useIsPaddingDisabled(props)) {
    return null;
  }

  const onChange = next => {
    const newStyle = { ...style,
      spacing: { ...(style === null || style === void 0 ? void 0 : style.spacing),
        padding: next
      }
    };
    setAttributes({
      style: (0, _utils.cleanEmptyObject)(newStyle)
    });
  };

  return _element.Platform.select({
    web: (0, _element.createElement)(_element.Fragment, null, (!spacingSizes || (spacingSizes === null || spacingSizes === void 0 ? void 0 : spacingSizes.length) === 0) && (0, _element.createElement)(_components.__experimentalBoxControl, {
      values: style === null || style === void 0 ? void 0 : (_style$spacing = style.spacing) === null || _style$spacing === void 0 ? void 0 : _style$spacing.padding,
      onChange: onChange,
      label: (0, _i18n.__)('Padding'),
      sides: sides,
      units: units,
      allowReset: false,
      splitOnAxis: splitOnAxis,
      onMouseOver: onMouseOver,
      onMouseOut: onMouseOut
    }), (spacingSizes === null || spacingSizes === void 0 ? void 0 : spacingSizes.length) > 0 && (0, _element.createElement)(_spacingSizesControl.default, {
      values: style === null || style === void 0 ? void 0 : (_style$spacing2 = style.spacing) === null || _style$spacing2 === void 0 ? void 0 : _style$spacing2.padding,
      onChange: onChange,
      label: (0, _i18n.__)('Padding'),
      sides: sides,
      units: units,
      allowReset: false,
      splitOnAxis: splitOnAxis,
      onMouseOver: onMouseOver,
      onMouseOut: onMouseOut
    })),
    native: null
  });
}

function PaddingVisualizer(_ref2) {
  var _attributes$style, _attributes$style$spa;

  let {
    clientId,
    attributes,
    forceShow
  } = _ref2;
  const padding = attributes === null || attributes === void 0 ? void 0 : (_attributes$style = attributes.style) === null || _attributes$style === void 0 ? void 0 : (_attributes$style$spa = _attributes$style.spacing) === null || _attributes$style$spa === void 0 ? void 0 : _attributes$style$spa.padding;
  const style = (0, _element.useMemo)(() => {
    return {
      borderTopWidth: padding !== null && padding !== void 0 && padding.top ? (0, _utils2.getSpacingPresetCssVar)(padding === null || padding === void 0 ? void 0 : padding.top) : 0,
      borderRightWidth: padding !== null && padding !== void 0 && padding.right ? (0, _utils2.getSpacingPresetCssVar)(padding === null || padding === void 0 ? void 0 : padding.right) : 0,
      borderBottomWidth: padding !== null && padding !== void 0 && padding.bottom ? (0, _utils2.getSpacingPresetCssVar)(padding === null || padding === void 0 ? void 0 : padding.bottom) : 0,
      borderLeftWidth: padding !== null && padding !== void 0 && padding.left ? (0, _utils2.getSpacingPresetCssVar)(padding === null || padding === void 0 ? void 0 : padding.left) : 0
    };
  }, [padding]);
  const [isActive, setIsActive] = (0, _element.useState)(false);
  const valueRef = (0, _element.useRef)(padding);
  const timeoutRef = (0, _element.useRef)();

  const clearTimer = () => {
    if (timeoutRef.current) {
      window.clearTimeout(timeoutRef.current);
    }
  };

  (0, _element.useEffect)(() => {
    if (!(0, _isShallowEqual.default)(padding, valueRef.current) && !forceShow) {
      setIsActive(true);
      valueRef.current = padding;
      timeoutRef.current = setTimeout(() => {
        setIsActive(false);
      }, 400);
    }

    return () => {
      setIsActive(false);
      clearTimer();
    };
  }, [padding, forceShow]);

  if (!isActive && !forceShow) {
    return null;
  }

  return (0, _element.createElement)(_blockPopover.default, {
    clientId: clientId,
    __unstableCoverTarget: true,
    __unstableRefreshSize: padding,
    shift: false
  }, (0, _element.createElement)("div", {
    className: "block-editor__padding-visualizer",
    style: style
  }));
}
//# sourceMappingURL=padding.js.map