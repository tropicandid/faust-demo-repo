"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MinHeightEdit = MinHeightEdit;
exports.hasMinHeightSupport = hasMinHeightSupport;
exports.hasMinHeightValue = hasMinHeightValue;
exports.resetMinHeight = resetMinHeight;
exports.useIsMinHeightDisabled = useIsMinHeightDisabled;

var _element = require("@wordpress/element");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _useSetting = _interopRequireDefault(require("../components/use-setting"));

var _dimensions = require("./dimensions");

var _utils = require("./utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Determines if there is minHeight support.
 *
 * @param {string|Object} blockType Block name or Block Type object.
 * @return {boolean} Whether there is support.
 */
function hasMinHeightSupport(blockType) {
  const support = (0, _blocks.getBlockSupport)(blockType, _dimensions.DIMENSIONS_SUPPORT_KEY);
  return !!(true === support || support !== null && support !== void 0 && support.minHeight);
}
/**
 * Checks if there is a current value in the minHeight block support attributes.
 *
 * @param {Object} props Block props.
 * @return {boolean} Whether or not the block has a minHeight value set.
 */


function hasMinHeightValue(props) {
  var _props$attributes$sty, _props$attributes$sty2;

  return ((_props$attributes$sty = props.attributes.style) === null || _props$attributes$sty === void 0 ? void 0 : (_props$attributes$sty2 = _props$attributes$sty.dimensions) === null || _props$attributes$sty2 === void 0 ? void 0 : _props$attributes$sty2.minHeight) !== undefined;
}
/**
 * Resets the minHeight block support attributes. This can be used when disabling
 * the padding support controls for a block via a `ToolsPanel`.
 *
 * @param {Object} props               Block props.
 * @param {Object} props.attributes    Block's attributes.
 * @param {Object} props.setAttributes Function to set block's attributes.
 */


function resetMinHeight(_ref) {
  let {
    attributes = {},
    setAttributes
  } = _ref;
  const {
    style
  } = attributes;
  setAttributes({
    style: (0, _utils.cleanEmptyObject)({ ...style,
      dimensions: { ...(style === null || style === void 0 ? void 0 : style.dimensions),
        minHeight: undefined
      }
    })
  });
}
/**
 * Custom hook that checks if minHeight controls have been disabled.
 *
 * @param {string} name The name of the block.
 * @return {boolean} Whether minHeight control is disabled.
 */


function useIsMinHeightDisabled() {
  let {
    name: blockName
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const isDisabled = !(0, _useSetting.default)('dimensions.minHeight');
  return !hasMinHeightSupport(blockName) || isDisabled;
}
/**
 * Inspector control panel containing the minHeight related configuration.
 *
 * @param {Object} props Block props.
 * @return {WPElement} Edit component for height.
 */


function MinHeightEdit(props) {
  var _style$dimensions;

  const {
    attributes: {
      style
    },
    setAttributes
  } = props;
  const units = (0, _components.__experimentalUseCustomUnits)({
    availableUnits: (0, _useSetting.default)('dimensions.units') || ['%', 'px', 'em', 'rem', 'vh', 'vw']
  });

  if (useIsMinHeightDisabled(props)) {
    return null;
  }

  const onChange = next => {
    const newStyle = { ...style,
      dimensions: { ...(style === null || style === void 0 ? void 0 : style.dimensions),
        minHeight: next
      }
    };
    setAttributes({
      style: (0, _utils.cleanEmptyObject)(newStyle)
    });
  };

  return (0, _element.createElement)(_components.__experimentalUnitControl, {
    label: (0, _i18n.__)('Min. height'),
    value: style === null || style === void 0 ? void 0 : (_style$dimensions = style.dimensions) === null || _style$dimensions === void 0 ? void 0 : _style$dimensions.minHeight,
    units: units,
    onChange: onChange,
    min: 0,
    size: '__unstable-large'
  });
}
//# sourceMappingURL=min-height.js.map