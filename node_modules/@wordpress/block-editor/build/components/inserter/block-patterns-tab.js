"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockPatternsCategoryDialog = BlockPatternsCategoryDialog;
exports.BlockPatternsCategoryPanel = BlockPatternsCategoryPanel;
exports.default = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _dom = require("@wordpress/dom");

var _usePatternsState = _interopRequireDefault(require("./hooks/use-patterns-state"));

var _blockPatternsList = _interopRequireDefault(require("../block-patterns-list"));

var _explorer = _interopRequireDefault(require("./block-patterns-explorer/explorer"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function usePatternsCategories() {
  const [allPatterns, allCategories] = (0, _usePatternsState.default)();
  const hasRegisteredCategory = (0, _element.useCallback)(pattern => {
    if (!pattern.categories || !pattern.categories.length) {
      return false;
    }

    return pattern.categories.some(cat => allCategories.some(category => category.name === cat));
  }, [allCategories]); // Remove any empty categories.

  const populatedCategories = (0, _element.useMemo)(() => {
    const categories = allCategories.filter(category => allPatterns.some(pattern => {
      var _pattern$categories;

      return (_pattern$categories = pattern.categories) === null || _pattern$categories === void 0 ? void 0 : _pattern$categories.includes(category.name);
    })).sort((_ref, _ref2) => {
      let {
        name: currentName
      } = _ref;
      let {
        name: nextName
      } = _ref2;

      if (![currentName, nextName].includes('featured')) {
        return 0;
      }

      return currentName === 'featured' ? -1 : 1;
    });

    if (allPatterns.some(pattern => !hasRegisteredCategory(pattern)) && !categories.find(category => category.name === 'uncategorized')) {
      categories.push({
        name: 'uncategorized',
        label: (0, _i18n._x)('Uncategorized')
      });
    }

    return categories;
  }, [allPatterns, allCategories]);
  return populatedCategories;
}

function BlockPatternsCategoryDialog(_ref3) {
  let {
    rootClientId,
    onInsert,
    category
  } = _ref3;
  const container = (0, _element.useRef)();
  (0, _element.useEffect)(() => {
    const timeout = setTimeout(() => {
      const [firstTabbable] = _dom.focus.tabbable.find(container.current);

      firstTabbable === null || firstTabbable === void 0 ? void 0 : firstTabbable.focus();
    });
    return () => clearTimeout(timeout);
  }, [category]);
  return (0, _element.createElement)("div", {
    ref: container,
    className: "block-editor-inserter__patterns-category-panel"
  }, (0, _element.createElement)(BlockPatternsCategoryPanel, {
    rootClientId: rootClientId,
    onInsert: onInsert,
    category: category
  }));
}

function BlockPatternsCategoryPanel(_ref4) {
  let {
    rootClientId,
    onInsert,
    category
  } = _ref4;
  const [allPatterns,, onClick] = (0, _usePatternsState.default)(onInsert, rootClientId);
  const availableCategories = usePatternsCategories();
  const currentCategoryPatterns = (0, _element.useMemo)(() => allPatterns.filter(pattern => {
    var _pattern$categories$f, _pattern$categories3;

    if (category.name !== 'uncategorized') {
      var _pattern$categories2;

      return (_pattern$categories2 = pattern.categories) === null || _pattern$categories2 === void 0 ? void 0 : _pattern$categories2.includes(category.name);
    } // The uncategorized category should show all the patterns without any category
    // or with no available category.


    const availablePatternCategories = (_pattern$categories$f = (_pattern$categories3 = pattern.categories) === null || _pattern$categories3 === void 0 ? void 0 : _pattern$categories3.filter(cat => availableCategories.find(availableCategory => availableCategory.name === cat))) !== null && _pattern$categories$f !== void 0 ? _pattern$categories$f : [];
    return availablePatternCategories.length === 0;
  }), [allPatterns, category]);
  const currentShownPatterns = (0, _compose.useAsyncList)(currentCategoryPatterns);

  if (!currentCategoryPatterns.length) {
    return null;
  }

  return (0, _element.createElement)("div", null, (0, _element.createElement)("div", {
    className: "block-editor-inserter__patterns-category-panel-title"
  }, category.label), (0, _element.createElement)("p", null, category.description), (0, _element.createElement)(_blockPatternsList.default, {
    shownPatterns: currentShownPatterns,
    blockPatterns: currentCategoryPatterns,
    onClickPattern: onClick,
    label: category.label,
    orientation: "vertical",
    category: category.label,
    isDraggable: true
  }));
}

function BlockPatternsTabs(_ref5) {
  let {
    onSelectCategory,
    selectedCategory,
    onInsert,
    rootClientId
  } = _ref5;
  const [showPatternsExplorer, setShowPatternsExplorer] = (0, _element.useState)(false);
  const categories = usePatternsCategories();
  const isMobile = (0, _compose.useViewportMatch)('medium', '<');
  return (0, _element.createElement)(_element.Fragment, null, !isMobile && (0, _element.createElement)("div", {
    className: "block-editor-inserter__block-patterns-tabs-container"
  }, (0, _element.createElement)("nav", {
    "aria-label": (0, _i18n.__)('Block pattern categories')
  }, (0, _element.createElement)(_components.__experimentalItemGroup, {
    role: "list",
    className: "block-editor-inserter__block-patterns-tabs"
  }, categories.map(category => (0, _element.createElement)(_components.__experimentalItem, {
    role: "listitem",
    key: category.name,
    onClick: () => onSelectCategory(category),
    className: category === selectedCategory ? 'block-editor-inserter__patterns-category block-editor-inserter__patterns-selected-category' : 'block-editor-inserter__patterns-category',
    "aria-label": category.label,
    "aria-current": category === selectedCategory ? 'true' : undefined
  }, (0, _element.createElement)(_components.__experimentalHStack, null, (0, _element.createElement)(_components.FlexBlock, null, category.label), (0, _element.createElement)(_icons.Icon, {
    icon: _icons.chevronRight
  })))), (0, _element.createElement)("div", {
    role: "presentation",
    className: "block-editor-inserter__patterns-fill-space"
  }), (0, _element.createElement)("div", {
    role: "listitem"
  }, (0, _element.createElement)(_components.Button, {
    className: "block-editor-inserter__patterns-explore-button",
    onClick: () => setShowPatternsExplorer(true),
    variant: "secondary"
  }, (0, _i18n.__)('Explore all patterns')))))), isMobile && (0, _element.createElement)(BlockPatternsTabNavigation, {
    onInsert: onInsert,
    rootClientId: rootClientId
  }), showPatternsExplorer && (0, _element.createElement)(_explorer.default, {
    initialCategory: selectedCategory,
    patternCategories: categories,
    onModalClose: () => setShowPatternsExplorer(false)
  }));
}

function BlockPatternsTabNavigation(_ref6) {
  let {
    onInsert,
    rootClientId
  } = _ref6;
  const categories = usePatternsCategories();
  return (0, _element.createElement)(_components.__experimentalNavigatorProvider, {
    initialPath: "/"
  }, (0, _element.createElement)(_components.__experimentalNavigatorScreen, {
    path: "/"
  }, (0, _element.createElement)(_components.__experimentalItemGroup, null, categories.map(category => (0, _element.createElement)(_components.__experimentalNavigatorButton, {
    key: category.name,
    path: `/category/${category.name}`,
    as: _components.__experimentalItem,
    isAction: true
  }, (0, _element.createElement)(_components.__experimentalHStack, null, (0, _element.createElement)(_components.FlexBlock, null, category.label), (0, _element.createElement)(_icons.Icon, {
    icon: (0, _i18n.isRTL)() ? _icons.chevronLeft : _icons.chevronRight
  })))))), categories.map(category => (0, _element.createElement)(_components.__experimentalNavigatorScreen, {
    key: category.name,
    path: `/category/${category.name}`
  }, (0, _element.createElement)(_components.__experimentalNavigatorBackButton, {
    icon: (0, _i18n.isRTL)() ? _icons.chevronRight : _icons.chevronLeft,
    isSmall: true,
    "aria-label": (0, _i18n.__)('Navigate to the categories list')
  }, (0, _i18n.__)('Back')), (0, _element.createElement)(BlockPatternsCategoryPanel, {
    category: category,
    rootClientId: rootClientId,
    onInsert: onInsert
  }))));
}

var _default = BlockPatternsTabs;
exports.default = _default;
//# sourceMappingURL=block-patterns-tab.js.map