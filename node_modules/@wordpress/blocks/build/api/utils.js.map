{"version":3,"sources":["@wordpress/blocks/src/api/utils.js"],"names":["namesPlugin","a11yPlugin","ICON_COLORS","isUnmodifiedDefaultBlock","block","defaultBlockName","name","newDefaultBlock","blockType","Object","keys","attributes","every","key","isValidIcon","icon","Component","normalizeIconObject","BLOCK_ICON_DEFAULT","src","colordBgColor","background","getColorContrast","iconColor","contrast","maxContrast","Math","max","map","foreground","find","shadowColor","alpha","toRgbString","normalizeBlockType","blockTypeOrName","getBlockLabel","context","__experimentalLabel","getLabel","title","label","getAccessibleBlockLabel","position","direction","hasPosition","undefined","hasLabel","__experimentalSanitizeBlockAttributes","Error","entries","reduce","accumulator","schema","value","hasOwnProperty","default","indexOf","source","Array","isArray","__experimentalGetBlockAttributesNamesByRole","role","attributesNames","filter","attributeName","__experimentalRole","omit","object","fromEntries","includes"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport a11yPlugin from 'colord/plugins/a11y';\n\n/**\n * WordPress dependencies\n */\nimport { Component, isValidElement } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { __unstableStripHTML as stripHTML } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { BLOCK_ICON_DEFAULT } from './constants';\nimport { getBlockType, getDefaultBlockName } from './registration';\nimport { createBlock } from './factory';\n\nextend( [ namesPlugin, a11yPlugin ] );\n\n/**\n * Array of icon colors containing a color to be used if the icon color\n * was not explicitly set but the icon background color was.\n *\n * @type {Object}\n */\nconst ICON_COLORS = [ '#191e23', '#f8f9f9' ];\n\n/**\n * Determines whether the block is a default block\n * and its attributes are equal to the default attributes\n * which means the block is unmodified.\n *\n * @param {WPBlock} block Block Object\n *\n * @return {boolean} Whether the block is an unmodified default block\n */\nexport function isUnmodifiedDefaultBlock( block ) {\n\tconst defaultBlockName = getDefaultBlockName();\n\tif ( block.name !== defaultBlockName ) {\n\t\treturn false;\n\t}\n\n\t// Cache a created default block if no cache exists or the default block\n\t// name changed.\n\tif (\n\t\t! isUnmodifiedDefaultBlock.block ||\n\t\tisUnmodifiedDefaultBlock.block.name !== defaultBlockName\n\t) {\n\t\tisUnmodifiedDefaultBlock.block = createBlock( defaultBlockName );\n\t}\n\n\tconst newDefaultBlock = isUnmodifiedDefaultBlock.block;\n\tconst blockType = getBlockType( defaultBlockName );\n\n\treturn Object.keys( blockType?.attributes ?? {} ).every(\n\t\t( key ) => newDefaultBlock.attributes[ key ] === block.attributes[ key ]\n\t);\n}\n\n/**\n * Function that checks if the parameter is a valid icon.\n *\n * @param {*} icon Parameter to be checked.\n *\n * @return {boolean} True if the parameter is a valid icon and false otherwise.\n */\n\nexport function isValidIcon( icon ) {\n\treturn (\n\t\t!! icon &&\n\t\t( typeof icon === 'string' ||\n\t\t\tisValidElement( icon ) ||\n\t\t\ttypeof icon === 'function' ||\n\t\t\ticon instanceof Component )\n\t);\n}\n\n/**\n * Function that receives an icon as set by the blocks during the registration\n * and returns a new icon object that is normalized so we can rely on just on possible icon structure\n * in the codebase.\n *\n * @param {WPBlockTypeIconRender} icon Render behavior of a block type icon;\n *                                     one of a Dashicon slug, an element, or a\n *                                     component.\n *\n * @return {WPBlockTypeIconDescriptor} Object describing the icon.\n */\nexport function normalizeIconObject( icon ) {\n\ticon = icon || BLOCK_ICON_DEFAULT;\n\tif ( isValidIcon( icon ) ) {\n\t\treturn { src: icon };\n\t}\n\n\tif ( 'background' in icon ) {\n\t\tconst colordBgColor = colord( icon.background );\n\t\tconst getColorContrast = ( iconColor ) =>\n\t\t\tcolordBgColor.contrast( iconColor );\n\t\tconst maxContrast = Math.max( ...ICON_COLORS.map( getColorContrast ) );\n\n\t\treturn {\n\t\t\t...icon,\n\t\t\tforeground: icon.foreground\n\t\t\t\t? icon.foreground\n\t\t\t\t: ICON_COLORS.find(\n\t\t\t\t\t\t( iconColor ) =>\n\t\t\t\t\t\t\tgetColorContrast( iconColor ) === maxContrast\n\t\t\t\t  ),\n\t\t\tshadowColor: colordBgColor.alpha( 0.3 ).toRgbString(),\n\t\t};\n\t}\n\n\treturn icon;\n}\n\n/**\n * Normalizes block type passed as param. When string is passed then\n * it converts it to the matching block type object.\n * It passes the original object otherwise.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n *\n * @return {?Object} Block type.\n */\nexport function normalizeBlockType( blockTypeOrName ) {\n\tif ( typeof blockTypeOrName === 'string' ) {\n\t\treturn getBlockType( blockTypeOrName );\n\t}\n\n\treturn blockTypeOrName;\n}\n\n/**\n * Get the label for the block, usually this is either the block title,\n * or the value of the block's `label` function when that's specified.\n *\n * @param {Object} blockType  The block type.\n * @param {Object} attributes The values of the block's attributes.\n * @param {Object} context    The intended use for the label.\n *\n * @return {string} The block label.\n */\nexport function getBlockLabel( blockType, attributes, context = 'visual' ) {\n\tconst { __experimentalLabel: getLabel, title } = blockType;\n\n\tconst label = getLabel && getLabel( attributes, { context } );\n\n\tif ( ! label ) {\n\t\treturn title;\n\t}\n\n\t// Strip any HTML (i.e. RichText formatting) before returning.\n\treturn stripHTML( label );\n}\n\n/**\n * Get a label for the block for use by screenreaders, this is more descriptive\n * than the visual label and includes the block title and the value of the\n * `getLabel` function if it's specified.\n *\n * @param {?Object} blockType              The block type.\n * @param {Object}  attributes             The values of the block's attributes.\n * @param {?number} position               The position of the block in the block list.\n * @param {string}  [direction='vertical'] The direction of the block layout.\n *\n * @return {string} The block label.\n */\nexport function getAccessibleBlockLabel(\n\tblockType,\n\tattributes,\n\tposition,\n\tdirection = 'vertical'\n) {\n\t// `title` is already localized, `label` is a user-supplied value.\n\tconst title = blockType?.title;\n\tconst label = blockType\n\t\t? getBlockLabel( blockType, attributes, 'accessibility' )\n\t\t: '';\n\tconst hasPosition = position !== undefined;\n\n\t// getBlockLabel returns the block title as a fallback when there's no label,\n\t// if it did return the title, this function needs to avoid adding the\n\t// title twice within the accessible label. Use this `hasLabel` boolean to\n\t// handle that.\n\tconst hasLabel = label && label !== title;\n\n\tif ( hasPosition && direction === 'vertical' ) {\n\t\tif ( hasLabel ) {\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: accessibility text. 1: The block title. 2: The block row number. 3: The block label.. */\n\t\t\t\t__( '%1$s Block. Row %2$d. %3$s' ),\n\t\t\t\ttitle,\n\t\t\t\tposition,\n\t\t\t\tlabel\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. 1: The block title. 2: The block row number. */\n\t\t\t__( '%1$s Block. Row %2$d' ),\n\t\t\ttitle,\n\t\t\tposition\n\t\t);\n\t} else if ( hasPosition && direction === 'horizontal' ) {\n\t\tif ( hasLabel ) {\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: accessibility text. 1: The block title. 2: The block column number. 3: The block label.. */\n\t\t\t\t__( '%1$s Block. Column %2$d. %3$s' ),\n\t\t\t\ttitle,\n\t\t\t\tposition,\n\t\t\t\tlabel\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. 1: The block title. 2: The block column number. */\n\t\t\t__( '%1$s Block. Column %2$d' ),\n\t\t\ttitle,\n\t\t\tposition\n\t\t);\n\t}\n\n\tif ( hasLabel ) {\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. %1: The block title. %2: The block label. */\n\t\t\t__( '%1$s Block. %2$s' ),\n\t\t\ttitle,\n\t\t\tlabel\n\t\t);\n\t}\n\n\treturn sprintf(\n\t\t/* translators: accessibility text. %s: The block title. */\n\t\t__( '%s Block' ),\n\t\ttitle\n\t);\n}\n\n/**\n * Ensure attributes contains only values defined by block type, and merge\n * default values for missing attributes.\n *\n * @param {string} name       The block's name.\n * @param {Object} attributes The block's attributes.\n * @return {Object} The sanitized attributes.\n */\nexport function __experimentalSanitizeBlockAttributes( name, attributes ) {\n\t// Get the type definition associated with a registered block.\n\tconst blockType = getBlockType( name );\n\n\tif ( undefined === blockType ) {\n\t\tthrow new Error( `Block type '${ name }' is not registered.` );\n\t}\n\n\treturn Object.entries( blockType.attributes ).reduce(\n\t\t( accumulator, [ key, schema ] ) => {\n\t\t\tconst value = attributes[ key ];\n\n\t\t\tif ( undefined !== value ) {\n\t\t\t\taccumulator[ key ] = value;\n\t\t\t} else if ( schema.hasOwnProperty( 'default' ) ) {\n\t\t\t\taccumulator[ key ] = schema.default;\n\t\t\t}\n\n\t\t\tif ( [ 'node', 'children' ].indexOf( schema.source ) !== -1 ) {\n\t\t\t\t// Ensure value passed is always an array, which we're expecting in\n\t\t\t\t// the RichText component to handle the deprecated value.\n\t\t\t\tif ( typeof accumulator[ key ] === 'string' ) {\n\t\t\t\t\taccumulator[ key ] = [ accumulator[ key ] ];\n\t\t\t\t} else if ( ! Array.isArray( accumulator[ key ] ) ) {\n\t\t\t\t\taccumulator[ key ] = [];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * Filter block attributes by `role` and return their names.\n *\n * @param {string} name Block attribute's name.\n * @param {string} role The role of a block attribute.\n *\n * @return {string[]} The attribute names that have the provided role.\n */\nexport function __experimentalGetBlockAttributesNamesByRole( name, role ) {\n\tconst attributes = getBlockType( name )?.attributes;\n\tif ( ! attributes ) return [];\n\tconst attributesNames = Object.keys( attributes );\n\tif ( ! role ) return attributesNames;\n\treturn attributesNames.filter(\n\t\t( attributeName ) =>\n\t\t\tattributes[ attributeName ]?.__experimentalRole === role\n\t);\n}\n\n/**\n * Return a new object with the specified keys omitted.\n *\n * @param {Object} object Original object.\n * @param {Array}  keys   Keys to be omitted.\n *\n * @return {Object} Object with omitted keys.\n */\nexport function omit( object, keys ) {\n\treturn Object.fromEntries(\n\t\tObject.entries( object ).filter( ( [ key ] ) => ! keys.includes( key ) )\n\t);\n}\n"]}