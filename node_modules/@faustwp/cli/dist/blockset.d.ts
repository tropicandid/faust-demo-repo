export declare const ROOT_DIR: string;
export declare const FAUST_DIR: string;
export declare const FAUST_BUILD_DIR: string;
export declare const BLOCKS_DIR: string;
export declare const MANIFEST_PATH: string;
/**
 * Represents the structure of the manifest file.
 */
export type Manifest = {
    blocks: any[];
    timestamp: string;
};
/**
 * Interface representing the structure of the parsed PHP asset file.
 */
export interface PhpAsset {
    dependencies?: string[];
    version?: string;
}
/**
 * Parses a PHP asset file content and converts it into a JSON object.
 *
 * @param {string} phpContent - The content of the PHP asset file.
 * @returns {PhpAsset} - A JSON object representing the parsed content.
 */
export declare function parsePhpAssetFile(phpContent: string): PhpAsset;
/**
 * Fetches paths to all block.json files while ignoring node_modules.
 *
 * @returns {Promise<string[]>} - An array of paths to block.json files.
 */
export declare function fetchBlockFiles(): Promise<string[]>;
/**
 * Processes each block.json file by copying its directory, updating the manifest,
 * and handling PHP files.
 *
 * @param {string[]} files - An array of paths to block.json files.
 * @returns {Promise<void>}
 */
export declare function processBlockFiles(files: string[]): Promise<void>;
/**
 * Creates a ZIP archive of the blocks.
 *
 * @returns {Promise<string>} - Path to the created ZIP archive.
 */
export declare function createZipArchive(): Promise<string>;
/**
 * Uploads the ZIP archive to WordPress.
 *
 * @param {string} zipPath - Path to the ZIP archive to be uploaded.
 * @returns {Promise<void>}
 */
export declare function uploadToWordPress(zipPath: string): Promise<void>;
/**
 * Compiles the blocks and places them into the FAUST build directory.
 *
 * @returns {Promise<void>}
 */
export declare function compileBlocks(): Promise<void>;
/**
 * Main function to process block files, create a ZIP archive, and upload to WordPress.
 *
 * @returns {Promise<void>}
 */
export declare function blockset(): Promise<void>;
