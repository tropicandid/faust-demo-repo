"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLogin = exports.GENERATE_AUTHORIZATION_CODE = void 0;
const client_1 = require("@apollo/client");
const react_1 = require("react");
const accessToken_js_1 = require("../auth/client/accessToken.js");
const index_js_1 = require("../utils/index.js");
exports.GENERATE_AUTHORIZATION_CODE = (0, client_1.gql) `
  mutation GenerateAuthorizationCode(
    $email: String
    $username: String
    $password: String!
  ) {
    generateAuthorizationCode(
      input: { email: $email, username: $username, password: $password }
    ) {
      code
      error
    }
  }
`;
function useLogin() {
    /**
     * Use our own data state value here instead of the data value from
     * the useMutation because we only want to return the data after the
     * access token has been fetched, as this is truly when a user is "logged in"
     */
    const [data, setData] = (0, react_1.useState)(undefined);
    const [redirectUrlAfterLogin, setRedirectUrlAfterLogin] = (0, react_1.useState)(undefined);
    const [loginMutation, { data: mutationData, loading, error }] = (0, client_1.useMutation)(exports.GENERATE_AUTHORIZATION_CODE);
    /**
     * Callable function to login a user from your Faust frontend.
     *
     * @param usernameEmail The user's username or email
     * @param password The user's password
     * @param redirectUrl An optional URL to redirect to after successful login.
     */
    function login(usernameEmail, password, redirectUrl) {
        // Clear states if there was a previous login attempt.
        setData(undefined);
        setRedirectUrlAfterLogin(redirectUrl);
        const mutationArgs = { password };
        if ((0, index_js_1.isValidEmail)(usernameEmail)) {
            mutationArgs.email = usernameEmail;
        }
        else {
            mutationArgs.username = usernameEmail;
        }
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        loginMutation({ variables: mutationArgs });
    }
    // Handle after mutation has recieved data
    (0, react_1.useEffect)(() => {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        (async () => {
            if (!mutationData) {
                return;
            }
            if (mutationData.generateAuthorizationCode.error !== null) {
                setData(mutationData);
                return;
            }
            // Fetch our access token with our authorization code
            await (0, accessToken_js_1.fetchAccessToken)(mutationData.generateAuthorizationCode.code);
            // User has been successfully logged in.
            setData(mutationData);
            if (redirectUrlAfterLogin) {
                window.location.assign(redirectUrlAfterLogin);
            }
        })();
    }, [mutationData, redirectUrlAfterLogin]);
    return {
        login,
        loading,
        data,
        error,
    };
}
exports.useLogin = useLogin;
