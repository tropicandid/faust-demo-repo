"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordPressTemplate = exports.WordPressTemplateInternal = void 0;
// eslint-disable-next-line import/extensions
const utilities_1 = require("@apollo/client/utilities");
const js_sha256_1 = require("js-sha256");
const react_1 = __importStar(require("react"));
const client_js_1 = require("../client.js");
const index_js_1 = require("../config/index.js");
const getTemplate_js_1 = require("../getTemplate.js");
const useAuth_js_1 = require("../hooks/useAuth.js");
const seedQuery_js_1 = require("../queries/seedQuery.js");
const FaustContext_js_1 = require("../store/FaustContext.js");
const convert_js_1 = require("../utils/convert.js");
function WordPressTemplateInternal(props) {
    const { templates } = (0, index_js_1.getConfig)();
    if (!templates) {
        throw new Error('Templates are required. Please add them to your config.');
    }
    const { seedNode, isAuthenticated, isPreview, __TEMPLATE_QUERY_DATA__: templateQueryDataProp, loading, setLoading } = props, wordpressTemplateProps = __rest(props, ["seedNode", "isAuthenticated", "isPreview", "__TEMPLATE_QUERY_DATA__", "loading", "setLoading"]);
    const template = (0, getTemplate_js_1.getTemplate)(seedNode, templates);
    const [data, setData] = (0, react_1.useState)(templateQueryDataProp);
    const { setQueries } = (0, react_1.useContext)(FaustContext_js_1.FaustContext) || {};
    if (template && template.queries && template.query) {
        throw new Error('`Only either `Component.query` or `Component.queries` can be provided, but not both.');
    }
    /**
     * Fetch the template's queries if defined.
     */
    (0, react_1.useEffect)(() => {
        void (async () => {
            const client = isPreview ? (0, client_js_1.getApolloAuthClient)() : (0, client_js_1.getApolloClient)();
            if (!template) {
                return;
            }
            if (template.query) {
                return;
            }
            if (!template.queries) {
                return;
            }
            if (!setQueries) {
                return;
            }
            let queries = null;
            const queryCalls = template.queries.map(({ query, variables }) => {
                const queryVariables = variables
                    ? variables(seedNode, { asPreview: isPreview })
                    : undefined;
                return client.query({
                    query,
                    variables: queryVariables,
                });
            });
            const queriesRes = await Promise.all(queryCalls);
            queries = {};
            queriesRes.forEach((queryRes, index) => {
                if (queries && template.queries) {
                    queries[(0, js_sha256_1.sha256)((0, utilities_1.print)(template.queries[index].query))] = queryRes.data;
                }
            });
            setQueries(queries);
            setLoading(false);
        })();
    }, [isAuthenticated, isPreview, seedNode, template, setQueries, setLoading]);
    /**
     * Fetch the template's query if defined.
     */
    (0, react_1.useEffect)(() => {
        void (async () => {
            const client = isPreview ? (0, client_js_1.getApolloAuthClient)() : (0, client_js_1.getApolloClient)();
            if (!template || !(template === null || template === void 0 ? void 0 : template.query) || (template === null || template === void 0 ? void 0 : template.queries) || !seedNode) {
                return;
            }
            if (data) {
                return;
            }
            setLoading(true);
            const queryArgs = {
                query: template === null || template === void 0 ? void 0 : template.query,
                variables: (template === null || template === void 0 ? void 0 : template.variables)
                    ? template === null || template === void 0 ? void 0 : template.variables(seedNode, { asPreview: isPreview })
                    : undefined,
            };
            const templateQueryRes = await client.query(queryArgs);
            setData(templateQueryRes.data);
            setLoading(false);
        })();
    }, [data, template, seedNode, isPreview, isAuthenticated, setLoading]);
    if (!template) {
        return null;
    }
    const Component = template;
    const newProps = Object.assign(Object.assign({}, wordpressTemplateProps), { __TEMPLATE_QUERY_DATA__: templateQueryDataProp, data,
        loading });
    return react_1.default.createElement(Component, newProps, null);
}
exports.WordPressTemplateInternal = WordPressTemplateInternal;
function WordPressTemplate(props) {
    const { basePath, templates } = (0, index_js_1.getConfig)();
    if (!templates) {
        throw new Error('Templates are required. Please add them to your config.');
    }
    const { __SEED_NODE__: seedNodeProp, __TEMPLATE_QUERY_DATA__: templateQueryDataProp, } = props;
    const [seedNode, setSeedNode] = (0, react_1.useState)(seedNodeProp !== null && seedNodeProp !== void 0 ? seedNodeProp : null);
    const template = (0, getTemplate_js_1.getTemplate)(seedNode, templates);
    const [loading, setLoading] = (0, react_1.useState)(template === null);
    const [isPreview, setIsPreview] = (0, react_1.useState)(templateQueryDataProp ? false : null);
    const { isAuthenticated, loginUrl } = (0, useAuth_js_1.useAuth)({
        strategy: 'redirect',
        shouldRedirect: false,
        skip: !isPreview,
    });
    /**
     * Determine if the URL we are on is for previews
     */
    (0, react_1.useEffect)(() => {
        if (!window) {
            return;
        }
        setIsPreview(window.location.search.includes('preview=true'));
    }, []);
    /**
     * If we are on a preview route and there is no authenticated user, redirect
     * them to the login page
     */
    (0, react_1.useEffect)(() => {
        if (!window) {
            return;
        }
        if (isPreview && isAuthenticated === false && loginUrl) {
            window.location.assign(loginUrl);
        }
    }, [isAuthenticated, isPreview, loginUrl]);
    /**
     * Execute the seed query.
     *
     * If the seed query was not available via a prop, it was not executed on the
     * server, meaning we are either dealing with a CSR page, or a preview page.
     */
    (0, react_1.useEffect)(() => {
        if (isPreview === null) {
            return;
        }
        if (isPreview === true && isAuthenticated !== true) {
            return;
        }
        if (seedNode) {
            return;
        }
        void (async () => {
            var _a, _b;
            const client = isPreview ? (0, client_js_1.getApolloAuthClient)() : (0, client_js_1.getApolloClient)();
            let seedQueryUri = window.location.href.replace(window.location.origin, '');
            let databaseId = '';
            if (isPreview) {
                seedQueryUri = (0, convert_js_1.getQueryParam)(window.location.href, 'previewPathname');
                databaseId = (0, convert_js_1.getQueryParam)(window.location.href, 'p');
                // If a user includes a base path, it will be part of the uri query that we need to filter out
                if (basePath) {
                    seedQueryUri = seedQueryUri.replace(basePath, '');
                }
                if (seedQueryUri === '') {
                    throw new Error('The URL must contain the proper "previewPathname" query param for previews.');
                }
            }
            const queryArgs = {
                query: seedQuery_js_1.SEED_QUERY,
                variables: Object.assign(Object.assign(Object.assign({}, (!isPreview && { uri: seedQueryUri })), (isPreview && { id: databaseId })), (isPreview && { asPreview: true })),
            };
            setLoading(true);
            const seedQueryRes = await client.query(queryArgs);
            const node = isPreview
                ? (_a = seedQueryRes === null || seedQueryRes === void 0 ? void 0 : seedQueryRes.data) === null || _a === void 0 ? void 0 : _a.contentNode
                : (_b = seedQueryRes === null || seedQueryRes === void 0 ? void 0 : seedQueryRes.data) === null || _b === void 0 ? void 0 : _b.nodeByUri;
            setSeedNode(node);
        })();
    }, [seedNode, isPreview, isAuthenticated, basePath]);
    if (seedNode === null ||
        isPreview === null ||
        (isPreview && isAuthenticated === null)) {
        return null;
    }
    return (react_1.default.createElement(WordPressTemplateInternal
    // eslint-disable-next-line react/jsx-props-no-spreading
    , Object.assign({}, props, { seedNode: seedNode, isPreview: isPreview, isAuthenticated: isAuthenticated, loading: loading, setLoading: setLoading })));
}
exports.WordPressTemplate = WordPressTemplate;
