"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugLog = exports.errorLog = exports.warnLog = exports.infoLog = exports.log = exports.styles = void 0;
const chalk_1 = __importDefault(require("chalk"));
const isDebug_js_1 = require("./isDebug.js");
exports.styles = {
    brand: chalk_1.default.bold.whiteBright,
    info: chalk_1.default.cyan,
    warn: chalk_1.default.yellow,
    error: chalk_1.default.red,
    success: chalk_1.default.blueBright,
    debug: chalk_1.default.magenta.italic,
};
const log = (logLevel, message, ...args) => {
    let styledLogLevel = '';
    switch (logLevel) {
        case 'info': {
            styledLogLevel = exports.styles.info('info');
            break;
        }
        case 'warn': {
            styledLogLevel = exports.styles.warn('warn');
            break;
        }
        case 'error': {
            styledLogLevel = exports.styles.error('error');
            break;
        }
        case 'debug': {
            styledLogLevel = exports.styles.debug('debug');
            break;
        }
        default: {
            break;
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, no-console
    console.log(`${styledLogLevel} - ${message}`, ...args);
};
exports.log = log;
const infoLog = (message, ...args) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    (0, exports.log)('info', message, ...args);
};
exports.infoLog = infoLog;
const warnLog = (message, ...args) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    (0, exports.log)('warn', message, ...args);
};
exports.warnLog = warnLog;
const errorLog = (message, ...args) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    (0, exports.log)('error', message, ...args);
};
exports.errorLog = errorLog;
const debugLog = (message, ...args) => {
    if (!(0, isDebug_js_1.isDebug)()) {
        return;
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    (0, exports.log)('debug', message, ...args);
};
exports.debugLog = debugLog;
