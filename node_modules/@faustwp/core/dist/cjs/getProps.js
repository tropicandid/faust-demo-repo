"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextServerSideProps = exports.getNextStaticProps = void 0;
const isBoolean_js_1 = __importDefault(require("lodash/isBoolean.js"));
const isObject_js_1 = __importDefault(require("lodash/isObject.js"));
const getWordPressProps_js_1 = require("./getWordPressProps.js");
const client_js_1 = require("./client.js");
/**
 * This helper function lets you build a static site with your WordPress data
 *
 * @param {GetStaticPropsContext} context
 * @param {GetNextStaticPropsConfig} cfg
 */
async function getNextStaticProps(context, cfg) {
    const { notFound, redirect, Page, revalidate, props, extra } = cfg;
    const apolloClient = (0, client_js_1.getApolloClient)();
    if ((0, isBoolean_js_1.default)(notFound) && notFound === true) {
        return {
            notFound,
            revalidate: getWordPressProps_js_1.DEFAULT_ISR_REVALIDATE,
        };
    }
    if ((0, isObject_js_1.default)(redirect)) {
        return {
            redirect,
        };
    }
    const pageVariables = (Page === null || Page === void 0 ? void 0 : Page.variables)
        ? Page === null || Page === void 0 ? void 0 : Page.variables(context, extra)
        : undefined;
    let pageQueryRes;
    if (Page.query) {
        pageQueryRes = await apolloClient.query({
            query: Page.query,
            variables: pageVariables,
        });
    }
    let returnedProps = Object.assign({}, props);
    if (pageQueryRes === null || pageQueryRes === void 0 ? void 0 : pageQueryRes.data) {
        returnedProps = Object.assign(Object.assign({}, returnedProps), { data: pageQueryRes.data });
    }
    if (pageVariables) {
        returnedProps = Object.assign(Object.assign({}, returnedProps), { __PAGE_VARIABLES__: pageVariables });
    }
    const pageProps = (0, client_js_1.addApolloState)(apolloClient, { props: returnedProps });
    pageProps.revalidate = revalidate !== null && revalidate !== void 0 ? revalidate : getWordPressProps_js_1.DEFAULT_ISR_REVALIDATE;
    return pageProps;
}
exports.getNextStaticProps = getNextStaticProps;
/**
 * This helper function lets you server side render your page with WordPress data
 *
 * @param {GetServerSidePropsContext} context
 * @param {GetNextServerSidePropsConfig} cfg
 */
async function getNextServerSideProps(context, cfg) {
    const { res } = context;
    const { notFound, redirect, Page, props, extra } = cfg;
    const apolloClient = (0, client_js_1.getApolloClient)();
    res.setHeader('x-using', 'faust');
    if ((0, isBoolean_js_1.default)(notFound) && notFound === true) {
        return {
            notFound,
        };
    }
    if ((0, isObject_js_1.default)(redirect)) {
        return {
            redirect,
        };
    }
    const pageVariables = (Page === null || Page === void 0 ? void 0 : Page.variables)
        ? Page === null || Page === void 0 ? void 0 : Page.variables(context, extra)
        : undefined;
    let pageQueryRes;
    if (Page.query) {
        pageQueryRes = await apolloClient.query({
            query: Page.query,
            variables: pageVariables,
        });
    }
    let returnedProps = Object.assign({}, props);
    if (pageQueryRes === null || pageQueryRes === void 0 ? void 0 : pageQueryRes.data) {
        returnedProps = Object.assign(Object.assign({}, returnedProps), { data: pageQueryRes.data });
    }
    if (pageVariables) {
        returnedProps = Object.assign(Object.assign({}, returnedProps), { __PAGE_VARIABLES__: pageVariables });
    }
    return (0, client_js_1.addApolloState)(apolloClient, {
        props: returnedProps,
    });
}
exports.getNextServerSideProps = getNextServerSideProps;
