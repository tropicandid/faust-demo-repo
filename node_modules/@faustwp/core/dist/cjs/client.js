"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useApollo = exports.addApolloState = exports.getApolloAuthClient = exports.getApolloClient = exports.createApolloClient = exports.APOLLO_STATE_PROP_NAME = void 0;
const client_1 = require("@apollo/client");
const deepmerge_1 = __importDefault(require("deepmerge"));
const isEqual_js_1 = __importDefault(require("lodash/isEqual.js"));
const react_1 = require("react");
// eslint-disable-next-line import/extensions
const context_1 = require("@apollo/client/link/context");
// eslint-disable-next-line import/extensions
const persisted_queries_1 = require("@apollo/client/link/persisted-queries");
const js_sha256_1 = require("js-sha256");
const index_js_1 = require("./auth/index.js");
const index_js_2 = require("./config/index.js");
const getGraphqlEndpoint_js_1 = require("./lib/getGraphqlEndpoint.js");
const index_js_3 = require("./wpHooks/index.js");
exports.APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__';
const windowApolloState = typeof window !== 'undefined' ? window[exports.APOLLO_STATE_PROP_NAME] : {};
let apolloClient;
let apolloAuthClient;
function createApolloClient(authenticated = false) {
    const { possibleTypes, usePersistedQueries, useGETForQueries } = (0, index_js_2.getConfig)();
    let inMemoryCacheObject = {
        possibleTypes,
        typePolicies: {
            RootQuery: {
                queryType: true,
            },
            RootMutation: {
                mutationType: true,
            },
        },
    };
    inMemoryCacheObject = index_js_3.hooks.applyFilters('apolloClientInMemoryCacheOptions', inMemoryCacheObject, {});
    let linkChain = (0, client_1.createHttpLink)({
        uri: (0, getGraphqlEndpoint_js_1.getGraphqlEndpoint)(),
        /**
         * Only add this option if usePersistedQueries is not set/false.
         * When persisted queries is enabled and this flag and useGETForHashedQueries
         * are both set, there is a conflict and persisted queries does not work.
         */
        useGETForQueries: useGETForQueries && !usePersistedQueries,
    });
    // If the user requested to use persisted queries, apply the link.
    if (usePersistedQueries) {
        linkChain = (0, persisted_queries_1.createPersistedQueryLink)({
            sha256: js_sha256_1.sha256,
            useGETForHashedQueries: useGETForQueries,
        }).concat(linkChain);
    }
    // If the request is coming from the auth client, apply the auth link.
    if (authenticated) {
        linkChain = (0, context_1.setContext)((_, { headers }) => {
            // get the authentication token from local storage if it exists
            const token = (0, index_js_1.getAccessToken)();
            // return the headers to the context so httpLink can read them
            return {
                headers: Object.assign(Object.assign({}, headers), { authorization: token ? `Bearer ${token}` : '' }),
            };
        }).concat(linkChain);
    }
    let apolloClientOptions = {
        ssrMode: typeof window === 'undefined',
        connectToDevTools: typeof window !== 'undefined',
        link: linkChain,
        cache: new client_1.InMemoryCache(inMemoryCacheObject).restore(windowApolloState),
    };
    apolloClientOptions = index_js_3.hooks.applyFilters('apolloClientOptions', apolloClientOptions, {});
    return new client_1.ApolloClient(apolloClientOptions);
}
exports.createApolloClient = createApolloClient;
function getApolloClient(initialState = null) {
    // eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle
    const _apolloClient = apolloClient !== null && apolloClient !== void 0 ? apolloClient : createApolloClient();
    // If your page has Next.js data fetching methods that use Apollo Client, the initial state
    // gets hydrated here
    if (initialState) {
        // Get existing cache, loaded during client side data fetching
        const existingCache = _apolloClient.extract();
        // Merge the initialState from getStaticProps/getServerSideProps in the existing cache
        const data = (0, deepmerge_1.default)(existingCache, initialState, {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            arrayMerge: (destination, source) => [
                ...source,
                ...destination.filter((d) => source.every((s) => !(0, isEqual_js_1.default)(d, s))),
            ],
        });
        // Restore the cache with the merged data
        _apolloClient.cache.restore(data);
    }
    // For SSG and SSR always create a new Apollo Client
    if (typeof window === 'undefined')
        return _apolloClient;
    // Create the Apollo Client once in the client
    if (!apolloClient)
        apolloClient = _apolloClient;
    return _apolloClient;
}
exports.getApolloClient = getApolloClient;
function getApolloAuthClient() {
    // eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle
    const _apolloAuthClient = apolloAuthClient !== null && apolloAuthClient !== void 0 ? apolloAuthClient : createApolloClient(true);
    if (!apolloAuthClient)
        apolloAuthClient = _apolloAuthClient;
    return _apolloAuthClient;
}
exports.getApolloAuthClient = getApolloAuthClient;
function addApolloState(client, pageProps) {
    if (pageProps === null || pageProps === void 0 ? void 0 : pageProps.props) {
        // eslint-disable-next-line no-param-reassign
        pageProps.props[exports.APOLLO_STATE_PROP_NAME] = client.cache.extract();
    }
    return pageProps;
}
exports.addApolloState = addApolloState;
function useApollo(pageProps) {
    const state = pageProps[exports.APOLLO_STATE_PROP_NAME];
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    const store = (0, react_1.useMemo)(() => getApolloClient(state), [state]);
    return store;
}
exports.useApollo = useApollo;
