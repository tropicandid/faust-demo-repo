import isBoolean from 'lodash/isBoolean.js';
import isObject from 'lodash/isObject.js';
import { DEFAULT_ISR_REVALIDATE } from './getWordPressProps.js';
import { addApolloState, getApolloClient } from './client.js';
/**
 * This helper function lets you build a static site with your WordPress data
 *
 * @param {GetStaticPropsContext} context
 * @param {GetNextStaticPropsConfig} cfg
 */
export async function getNextStaticProps(context, cfg) {
    const { notFound, redirect, Page, revalidate, props, extra } = cfg;
    const apolloClient = getApolloClient();
    if (isBoolean(notFound) && notFound === true) {
        return {
            notFound,
            revalidate: DEFAULT_ISR_REVALIDATE,
        };
    }
    if (isObject(redirect)) {
        return {
            redirect,
        };
    }
    const pageVariables = (Page === null || Page === void 0 ? void 0 : Page.variables)
        ? Page === null || Page === void 0 ? void 0 : Page.variables(context, extra)
        : undefined;
    let pageQueryRes;
    if (Page.query) {
        pageQueryRes = await apolloClient.query({
            query: Page.query,
            variables: pageVariables,
        });
    }
    let returnedProps = Object.assign({}, props);
    if (pageQueryRes === null || pageQueryRes === void 0 ? void 0 : pageQueryRes.data) {
        returnedProps = Object.assign(Object.assign({}, returnedProps), { data: pageQueryRes.data });
    }
    if (pageVariables) {
        returnedProps = Object.assign(Object.assign({}, returnedProps), { __PAGE_VARIABLES__: pageVariables });
    }
    const pageProps = addApolloState(apolloClient, { props: returnedProps });
    pageProps.revalidate = revalidate !== null && revalidate !== void 0 ? revalidate : DEFAULT_ISR_REVALIDATE;
    return pageProps;
}
/**
 * This helper function lets you server side render your page with WordPress data
 *
 * @param {GetServerSidePropsContext} context
 * @param {GetNextServerSidePropsConfig} cfg
 */
export async function getNextServerSideProps(context, cfg) {
    const { res } = context;
    const { notFound, redirect, Page, props, extra } = cfg;
    const apolloClient = getApolloClient();
    res.setHeader('x-using', 'faust');
    if (isBoolean(notFound) && notFound === true) {
        return {
            notFound,
        };
    }
    if (isObject(redirect)) {
        return {
            redirect,
        };
    }
    const pageVariables = (Page === null || Page === void 0 ? void 0 : Page.variables)
        ? Page === null || Page === void 0 ? void 0 : Page.variables(context, extra)
        : undefined;
    let pageQueryRes;
    if (Page.query) {
        pageQueryRes = await apolloClient.query({
            query: Page.query,
            variables: pageVariables,
        });
    }
    let returnedProps = Object.assign({}, props);
    if (pageQueryRes === null || pageQueryRes === void 0 ? void 0 : pageQueryRes.data) {
        returnedProps = Object.assign(Object.assign({}, returnedProps), { data: pageQueryRes.data });
    }
    if (pageVariables) {
        returnedProps = Object.assign(Object.assign({}, returnedProps), { __PAGE_VARIABLES__: pageVariables });
    }
    return addApolloState(apolloClient, {
        props: returnedProps,
    });
}
