import React, { useEffect, useState } from 'react';
import { ApolloProvider } from '@apollo/client';
// eslint-disable-next-line import/extensions
import { useRouter } from 'next/router';
import { useApollo } from '../client.js';
import { Toolbar } from './Toolbar/index.js';
import { getConfig } from '../config/index.js';
import { FaustContext } from '../store/FaustContext.js';
export function FaustProvider(props) {
    const { pageProps, children } = props;
    const { experimentalToolbar } = getConfig();
    const router = useRouter();
    const apolloClient = useApollo(pageProps);
    const setQueries = (newQueries) => {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        setFaustContext((prevContext) => {
            return Object.assign(Object.assign({}, prevContext), { queries: newQueries });
        });
    };
    const [faustContext, setFaustContext] = useState({
        // eslint-disable-next-line no-underscore-dangle
        queries: pageProps.__FAUST_QUERIES__,
        setQueries,
    });
    /**
     * On page transitions, reset the queries state based on the new page props.
     */
    useEffect(() => {
        // eslint-disable-next-line no-underscore-dangle
        if (pageProps.__FAUST_QUERIES__)
            setQueries(pageProps.__FAUST_QUERIES__);
        // eslint-disable-next-line no-underscore-dangle
    }, [pageProps.__FAUST_QUERIES__]);
    return (React.createElement(FaustContext.Provider, { value: faustContext },
        React.createElement(ApolloProvider, { client: apolloClient },
            experimentalToolbar && (React.createElement(Toolbar, { key: `faust-toolbar-${router.asPath}`, 
                // eslint-disable-next-line no-underscore-dangle
                seedNode: pageProps.__SEED_NODE__ })),
            children)));
}
