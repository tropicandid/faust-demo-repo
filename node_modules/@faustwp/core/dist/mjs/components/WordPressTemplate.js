var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
// eslint-disable-next-line import/extensions
import { print } from '@apollo/client/utilities';
import { sha256 } from 'js-sha256';
import React, { useContext, useEffect, useState, } from 'react';
import { getApolloAuthClient, getApolloClient } from '../client.js';
import { getConfig } from '../config/index.js';
import { getTemplate } from '../getTemplate.js';
import { useAuth } from '../hooks/useAuth.js';
import { SEED_QUERY } from '../queries/seedQuery.js';
import { FaustContext } from '../store/FaustContext.js';
import { getQueryParam } from '../utils/convert.js';
export function WordPressTemplateInternal(props) {
    const { templates } = getConfig();
    if (!templates) {
        throw new Error('Templates are required. Please add them to your config.');
    }
    const { seedNode, isAuthenticated, isPreview, __TEMPLATE_QUERY_DATA__: templateQueryDataProp, loading, setLoading } = props, wordpressTemplateProps = __rest(props, ["seedNode", "isAuthenticated", "isPreview", "__TEMPLATE_QUERY_DATA__", "loading", "setLoading"]);
    const template = getTemplate(seedNode, templates);
    const [data, setData] = useState(templateQueryDataProp);
    const { setQueries } = useContext(FaustContext) || {};
    if (template && template.queries && template.query) {
        throw new Error('`Only either `Component.query` or `Component.queries` can be provided, but not both.');
    }
    /**
     * Fetch the template's queries if defined.
     */
    useEffect(() => {
        void (async () => {
            const client = isPreview ? getApolloAuthClient() : getApolloClient();
            if (!template) {
                return;
            }
            if (template.query) {
                return;
            }
            if (!template.queries) {
                return;
            }
            if (!setQueries) {
                return;
            }
            let queries = null;
            const queryCalls = template.queries.map(({ query, variables }) => {
                const queryVariables = variables
                    ? variables(seedNode, { asPreview: isPreview })
                    : undefined;
                return client.query({
                    query,
                    variables: queryVariables,
                });
            });
            const queriesRes = await Promise.all(queryCalls);
            queries = {};
            queriesRes.forEach((queryRes, index) => {
                if (queries && template.queries) {
                    queries[sha256(print(template.queries[index].query))] = queryRes.data;
                }
            });
            setQueries(queries);
            setLoading(false);
        })();
    }, [isAuthenticated, isPreview, seedNode, template, setQueries, setLoading]);
    /**
     * Fetch the template's query if defined.
     */
    useEffect(() => {
        void (async () => {
            const client = isPreview ? getApolloAuthClient() : getApolloClient();
            if (!template || !(template === null || template === void 0 ? void 0 : template.query) || (template === null || template === void 0 ? void 0 : template.queries) || !seedNode) {
                return;
            }
            if (data) {
                return;
            }
            setLoading(true);
            const queryArgs = {
                query: template === null || template === void 0 ? void 0 : template.query,
                variables: (template === null || template === void 0 ? void 0 : template.variables)
                    ? template === null || template === void 0 ? void 0 : template.variables(seedNode, { asPreview: isPreview })
                    : undefined,
            };
            const templateQueryRes = await client.query(queryArgs);
            setData(templateQueryRes.data);
            setLoading(false);
        })();
    }, [data, template, seedNode, isPreview, isAuthenticated, setLoading]);
    if (!template) {
        return null;
    }
    const Component = template;
    const newProps = Object.assign(Object.assign({}, wordpressTemplateProps), { __TEMPLATE_QUERY_DATA__: templateQueryDataProp, data,
        loading });
    return React.createElement(Component, newProps, null);
}
export function WordPressTemplate(props) {
    const { basePath, templates } = getConfig();
    if (!templates) {
        throw new Error('Templates are required. Please add them to your config.');
    }
    const { __SEED_NODE__: seedNodeProp, __TEMPLATE_QUERY_DATA__: templateQueryDataProp, } = props;
    const [seedNode, setSeedNode] = useState(seedNodeProp !== null && seedNodeProp !== void 0 ? seedNodeProp : null);
    const template = getTemplate(seedNode, templates);
    const [loading, setLoading] = useState(template === null);
    const [isPreview, setIsPreview] = useState(templateQueryDataProp ? false : null);
    const { isAuthenticated, loginUrl } = useAuth({
        strategy: 'redirect',
        shouldRedirect: false,
        skip: !isPreview,
    });
    /**
     * Determine if the URL we are on is for previews
     */
    useEffect(() => {
        if (!window) {
            return;
        }
        setIsPreview(window.location.search.includes('preview=true'));
    }, []);
    /**
     * If we are on a preview route and there is no authenticated user, redirect
     * them to the login page
     */
    useEffect(() => {
        if (!window) {
            return;
        }
        if (isPreview && isAuthenticated === false && loginUrl) {
            window.location.assign(loginUrl);
        }
    }, [isAuthenticated, isPreview, loginUrl]);
    /**
     * Execute the seed query.
     *
     * If the seed query was not available via a prop, it was not executed on the
     * server, meaning we are either dealing with a CSR page, or a preview page.
     */
    useEffect(() => {
        if (isPreview === null) {
            return;
        }
        if (isPreview === true && isAuthenticated !== true) {
            return;
        }
        if (seedNode) {
            return;
        }
        void (async () => {
            var _a, _b;
            const client = isPreview ? getApolloAuthClient() : getApolloClient();
            let seedQueryUri = window.location.href.replace(window.location.origin, '');
            let databaseId = '';
            if (isPreview) {
                seedQueryUri = getQueryParam(window.location.href, 'previewPathname');
                databaseId = getQueryParam(window.location.href, 'p');
                // If a user includes a base path, it will be part of the uri query that we need to filter out
                if (basePath) {
                    seedQueryUri = seedQueryUri.replace(basePath, '');
                }
                if (seedQueryUri === '') {
                    throw new Error('The URL must contain the proper "previewPathname" query param for previews.');
                }
            }
            const queryArgs = {
                query: SEED_QUERY,
                variables: Object.assign(Object.assign(Object.assign({}, (!isPreview && { uri: seedQueryUri })), (isPreview && { id: databaseId })), (isPreview && { asPreview: true })),
            };
            setLoading(true);
            const seedQueryRes = await client.query(queryArgs);
            const node = isPreview
                ? (_a = seedQueryRes === null || seedQueryRes === void 0 ? void 0 : seedQueryRes.data) === null || _a === void 0 ? void 0 : _a.contentNode
                : (_b = seedQueryRes === null || seedQueryRes === void 0 ? void 0 : seedQueryRes.data) === null || _b === void 0 ? void 0 : _b.nodeByUri;
            setSeedNode(node);
        })();
    }, [seedNode, isPreview, isAuthenticated, basePath]);
    if (seedNode === null ||
        isPreview === null ||
        (isPreview && isAuthenticated === null)) {
        return null;
    }
    return (React.createElement(WordPressTemplateInternal
    // eslint-disable-next-line react/jsx-props-no-spreading
    , Object.assign({}, props, { seedNode: seedNode, isPreview: isPreview, isAuthenticated: isAuthenticated, loading: loading, setLoading: setLoading })));
}
