import React from 'react';
export interface WordpressBlocksViewerProps {
    /**
     * Block data obtained from WPGraphQL Content Blocks
     */
    blocks: Array<ContentBlock | null>;
    /**
     * An optional React component that will be used if
     * no React components are resolved for a given block.
     *
     * @example
     * ```jsx
     * const MyFallbackComponent = ({renderedHtml}) => {
     *   return (
     *     <span dangerouslySetInnerHTML={{__html: renderedHtml}} />
     *   )
     * }
     *
     * <WordPressBlocksViewer fallbackBlock={MyFallbackComponent} />
     * ```
     */
    fallbackBlock?: React.FC<ContentBlock>;
}
export interface ContentBlock {
    __typename?: string;
    apiVersion?: number;
    cssClassNames?: string;
    innerBlocks?: Array<ContentBlock | null>;
    isDynamic?: boolean;
    name?: string;
    renderedHtml?: string;
}
export interface BlockWithAttributes extends ContentBlock {
    attributes?: Record<string, unknown> | null;
}
/**
 * WordPressBlocksViewer is the main component that renders blocks taken from WordPress as a list of ContentBlock[] data.
 * @param props WordpressBlocksViewerProps
 * @returns JSX.Component that renders the block tree.
 */
export declare function WordPressBlocksViewer(props: WordpressBlocksViewerProps): React.JSX.Element;
