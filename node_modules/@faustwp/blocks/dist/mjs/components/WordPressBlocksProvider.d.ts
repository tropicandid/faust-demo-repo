import React, { FC } from 'react';
import type { DocumentNode } from '@apollo/client';
import { BlocksTheme } from '../types/theme.js';
export type WordPressBlockBase = React.FC & {
    fragments: {
        key: string;
        entry: DocumentNode;
    };
    displayName: string;
    name: string;
    config: {
        name: string;
    };
};
/**
 * WordPressBlock is a React component that contains some optional properties that we are
 * used to match it with equivalent block data from the API
 */
export type WordPressBlock<P = {
    [key: string]: any;
}> = FC<P> & Partial<Pick<WordPressBlockBase, 'config' | 'displayName' | 'name' | 'fragments'>>;
export type WordPressBlocksContextType = {
    [key: string]: WordPressBlock;
} | undefined;
export type WordPressThemeContextType = BlocksTheme | undefined;
export declare const WordPressBlocksContext: React.Context<WordPressBlocksContextType>;
export declare const WordPressThemeContext: React.Context<WordPressThemeContextType>;
export type WordPressBlocksProviderConfig = {
    blocks: {
        [key: string]: WordPressBlock;
    };
    theme?: BlocksTheme;
};
/**
 * WordPressBlocksProvider is used as a central store for the available list of WordPressBlock types.
 * @param props
 * @returns
 */
export declare function WordPressBlocksProvider(props: {
    children: React.ReactNode;
    config: WordPressBlocksProviderConfig;
}): React.JSX.Element;
/**
 * useBlocksTheme can be used to retrieve the theme
 * from within the WordPressBlocksProvider.
 *
 * @example
 * ```
 * const theme = useBlocksTheme();
 * ```
 */
export declare function useBlocksTheme(): BlocksTheme;
