import { hooks } from '@faustwp/core';
import DefaultBlock from './components/DefaultBlock.js';
/**
 * This function contains the main resolve logic for matching a provided contentBlock instance with the list of
 * available WordPressBlock components.
 *
 * @param contentBlock An instance of a block as retrieved from the API
 * @param blocks A list of available WordPressBlock components to match with the provided contentBlock
 * @param fallbackBlock A React component that, when specified, will be used when no blocks were resolved.
 * @returns An instance of the WordPressBlock component that matches the the provided contentBlock or a DefaultBlock if no such match exists.
 */
export default function resolveBlockTemplate(contentBlock, blocks, fallbackBlock) {
    // eslint-disable-next-line no-underscore-dangle
    const namesToCheck = [contentBlock === null || contentBlock === void 0 ? void 0 : contentBlock.name, contentBlock === null || contentBlock === void 0 ? void 0 : contentBlock.__typename].filter(Boolean);
    let block = Object.values(blocks).find((item) => {
        var _a;
        for (let i = 0; i < namesToCheck.length; i += 1) {
            if ((item === null || item === void 0 ? void 0 : item.displayName) === namesToCheck[i]) {
                return true;
            }
            if (((_a = item === null || item === void 0 ? void 0 : item.config) === null || _a === void 0 ? void 0 : _a.name) === namesToCheck[i]) {
                return true;
            }
            if ((item === null || item === void 0 ? void 0 : item.name) === namesToCheck[i]) {
                return true;
            }
        }
        return false;
    });
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    block = hooks.applyFilters('faustBlocksResolveBlockTemplate', block, {
        contentBlock,
        blocks,
        namesToCheck,
    });
    if (block) {
        return block;
    }
    if (fallbackBlock) {
        return fallbackBlock;
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    return hooks.applyFilters('faustBlocksFallbackBlock', DefaultBlock, {});
}
