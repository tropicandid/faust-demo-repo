import { gql } from '@apollo/client';
import React from 'react';
import Link from 'next/link.js';
import { useBlocksTheme } from '../components/WordPressBlocksProvider.js';
import { getStyles } from '../utils/index.js';
export function CoreButton(props) {
    const theme = useBlocksTheme();
    const style = getStyles(theme, Object.assign({}, props));
    const { attributes } = props;
    const linkTarget = (attributes === null || attributes === void 0 ? void 0 : attributes.linkTarget) ? '_blank' : undefined;
    if (attributes === null || attributes === void 0 ? void 0 : attributes.url) {
        return (React.createElement("div", { "aria-label": attributes === null || attributes === void 0 ? void 0 : attributes.text, id: attributes === null || attributes === void 0 ? void 0 : attributes.anchor, className: attributes === null || attributes === void 0 ? void 0 : attributes.cssClassName },
            React.createElement(Link, { href: attributes === null || attributes === void 0 ? void 0 : attributes.url },
                React.createElement("a", { target: linkTarget, className: attributes === null || attributes === void 0 ? void 0 : attributes.linkClassName, rel: attributes === null || attributes === void 0 ? void 0 : attributes.rel, style: style },
                    React.createElement("span", null, attributes === null || attributes === void 0 ? void 0 : attributes.text)))));
    }
    return (React.createElement("div", { "aria-label": attributes === null || attributes === void 0 ? void 0 : attributes.text, id: attributes === null || attributes === void 0 ? void 0 : attributes.anchor, className: attributes === null || attributes === void 0 ? void 0 : attributes.cssClassName },
        React.createElement("a", { target: linkTarget, className: attributes === null || attributes === void 0 ? void 0 : attributes.linkClassName, rel: attributes === null || attributes === void 0 ? void 0 : attributes.rel, style: style },
            React.createElement("span", null, attributes === null || attributes === void 0 ? void 0 : attributes.text))));
}
CoreButton.fragments = {
    key: `CoreButtonBlockFragment`,
    entry: gql `
    fragment CoreButtonBlockFragment on CoreButton {
      attributes {
        anchor
        gradient
        text
        textAlign
        textColor
        style
        fontSize
        fontFamily
        linkTarget
        rel
        url
        backgroundColor
        cssClassName
        linkClassName
      }
    }
  `,
};
CoreButton.config = {
    name: 'CoreButton',
};
CoreButton.displayName = 'CoreButton';
