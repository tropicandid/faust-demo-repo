import { gql } from '@apollo/client';
import Image from 'next/image.js';
import React from 'react';
import { useBlocksTheme } from '../components/WordPressBlocksProvider.js';
import { getStyles } from '../utils/index.js';
function LinkWrapper(props) {
    const { attributes, children } = props;
    if (!(attributes === null || attributes === void 0 ? void 0 : attributes.href)) {
        /**
         * Fragment is used to fix the following TS error:
         * 'LinkWrapper' cannot be used as a JSX component.
         */
        // eslint-disable-next-line react/jsx-no-useless-fragment
        return React.createElement(React.Fragment, null, children);
    }
    /**
     * Using a traditional "a" tag here instead of a Next link since Next links
     * only work with relative Next.js pages. Identifying that is tough.
     * We could conditionally use a Next.js Link for relative URLs, but since we
     * are seeing a hybrid approach of Faust apps with their monolithic WP counterparts,
     * for now it's best to stick with a simple "a" tag.
     */
    return (React.createElement("a", { href: attributes.href, target: attributes === null || attributes === void 0 ? void 0 : attributes.linkTarget, className: attributes === null || attributes === void 0 ? void 0 : attributes.linkClass, rel: attributes === null || attributes === void 0 ? void 0 : attributes.rel }, children));
}
function ImgWrapper(props) {
    var _a, _b, _c, _d;
    const theme = useBlocksTheme();
    const style = getStyles(theme, Object.assign({}, props));
    const { attributes } = props;
    if (!(attributes === null || attributes === void 0 ? void 0 : attributes.src)) {
        return null;
    }
    /**
     * Next Image requires width, height, and alt
     *
     * @link https://nextjs.org/docs/pages/api-reference/components/image
     */
    if ((attributes === null || attributes === void 0 ? void 0 : attributes.width) && (attributes === null || attributes === void 0 ? void 0 : attributes.height)) {
        React.createElement(Image, { style: style, src: attributes === null || attributes === void 0 ? void 0 : attributes.src, width: attributes.width, height: attributes.height, alt: (_a = attributes === null || attributes === void 0 ? void 0 : attributes.alt) !== null && _a !== void 0 ? _a : '', title: (_b = attributes === null || attributes === void 0 ? void 0 : attributes.title) !== null && _b !== void 0 ? _b : undefined });
    }
    return (React.createElement("img", { src: attributes.src, style: style, alt: (_c = attributes === null || attributes === void 0 ? void 0 : attributes.alt) !== null && _c !== void 0 ? _c : '', title: (_d = attributes === null || attributes === void 0 ? void 0 : attributes.title) !== null && _d !== void 0 ? _d : undefined }));
}
export function CoreImage(props) {
    var _a;
    const { attributes } = props;
    return (React.createElement("figure", { id: (_a = attributes === null || attributes === void 0 ? void 0 : attributes.anchor) !== null && _a !== void 0 ? _a : undefined, className: attributes === null || attributes === void 0 ? void 0 : attributes.cssClassName },
        React.createElement(LinkWrapper, Object.assign({}, props),
            React.createElement(ImgWrapper, Object.assign({}, props))),
        (attributes === null || attributes === void 0 ? void 0 : attributes.caption) && (React.createElement("figcaption", { className: "wp-element-caption" }, attributes.caption))));
}
CoreImage.fragments = {
    key: `CoreImageBlockFragment`,
    entry: gql `
    fragment CoreImageBlockFragment on CoreImage {
      attributes {
        align
        alt
        anchor
        borderColor
        caption
        className
        width
        url
        title
        style
        src
        sizeSlug
        rel
        lock
        linkTarget
        linkDestination
        linkClass
        href
        height
        cssClassName
      }
    }
  `,
};
CoreImage.config = {
    name: 'CoreImage',
};
CoreImage.displayName = 'CoreImage';
