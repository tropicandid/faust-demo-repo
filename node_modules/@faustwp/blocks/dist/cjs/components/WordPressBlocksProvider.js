"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBlocksTheme = exports.WordPressBlocksProvider = exports.WordPressThemeContext = exports.WordPressBlocksContext = void 0;
const react_1 = __importDefault(require("react"));
exports.WordPressBlocksContext = react_1.default.createContext(undefined);
exports.WordPressThemeContext = react_1.default.createContext(undefined);
/**
 * WordPressBlocksProvider is used as a central store for the available list of WordPressBlock types.
 * @param props
 * @returns
 */
function WordPressBlocksProvider(props) {
    const { children, config } = props;
    const { blocks, theme } = config;
    return (react_1.default.createElement(exports.WordPressBlocksContext.Provider, { value: blocks },
        react_1.default.createElement(exports.WordPressThemeContext.Provider, { value: theme }, children)));
}
exports.WordPressBlocksProvider = WordPressBlocksProvider;
/**
 * useBlocksTheme can be used to retrieve the theme
 * from within the WordPressBlocksProvider.
 *
 * @example
 * ```
 * const theme = useBlocksTheme();
 * ```
 */
function useBlocksTheme() {
    const themeContext = react_1.default.useContext(exports.WordPressThemeContext);
    // If it's an empty object, the provider hasn't been initialized.
    if (themeContext === undefined) {
        throw new Error('useBlocksTheme hook was called outside of context, make sure your app is wrapped with WordPressBlocksProvider');
    }
    return themeContext;
}
exports.useBlocksTheme = useBlocksTheme;
