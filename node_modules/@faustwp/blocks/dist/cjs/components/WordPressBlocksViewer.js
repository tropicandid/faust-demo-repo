"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordPressBlocksViewer = void 0;
const react_1 = __importDefault(require("react"));
const resolveBlockTemplate_js_1 = __importDefault(require("../resolveBlockTemplate.js"));
const WordPressBlocksProvider_js_1 = require("./WordPressBlocksProvider.js");
/**
 * WordPressBlocksViewer is the main component that renders blocks taken from WordPress as a list of ContentBlock[] data.
 * @param props WordpressBlocksViewerProps
 * @returns JSX.Component that renders the block tree.
 */
function WordPressBlocksViewer(props) {
    const blocks = react_1.default.useContext(WordPressBlocksProvider_js_1.WordPressBlocksContext);
    if (!blocks) {
        throw new Error('Blocks are required. Please add them to your config.');
    }
    const { blocks: editorBlocks, fallbackBlock } = props;
    if (!editorBlocks) {
        throw new Error('The "blocks" prop is required in <WordPressBlocksViewer>');
    }
    const renderedBlocks = editorBlocks.map((blockProps, idx) => {
        const BlockTemplate = (0, resolveBlockTemplate_js_1.default)(blockProps, blocks, fallbackBlock);
        return react_1.default.createElement(BlockTemplate, Object.assign(Object.assign({}, blockProps), { 
            // eslint-disable-next-line react/no-array-index-key
            key: idx }));
    });
    // eslint-disable-next-line react/jsx-no-useless-fragment
    return react_1.default.createElement(react_1.default.Fragment, null, renderedBlocks);
}
exports.WordPressBlocksViewer = WordPressBlocksViewer;
