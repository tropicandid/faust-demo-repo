"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreList = void 0;
const client_1 = require("@apollo/client");
const react_1 = __importDefault(require("react"));
const WordPressBlocksProvider_js_1 = require("../components/WordPressBlocksProvider.js");
const index_js_1 = require("../utils/index.js");
function CoreList(props) {
    const theme = (0, WordPressBlocksProvider_js_1.useBlocksTheme)();
    const style = (0, index_js_1.getStyles)(theme, Object.assign({}, props));
    const { attributes } = props;
    if (!(attributes === null || attributes === void 0 ? void 0 : attributes.values)) {
        return null;
    }
    const ListLevel = (attributes === null || attributes === void 0 ? void 0 : attributes.ordered) ? 'ol' : 'ul';
    return (react_1.default.createElement(ListLevel, { style: style, className: attributes === null || attributes === void 0 ? void 0 : attributes.cssClassName, reversed: (attributes === null || attributes === void 0 ? void 0 : attributes.ordered) && (attributes === null || attributes === void 0 ? void 0 : attributes.reversed) === true ? true : undefined, start: (attributes === null || attributes === void 0 ? void 0 : attributes.ordered) && (attributes === null || attributes === void 0 ? void 0 : attributes.start) ? attributes === null || attributes === void 0 ? void 0 : attributes.start : undefined, 
        // eslint-disable-next-line react/no-danger
        dangerouslySetInnerHTML: { __html: attributes.values } }));
}
exports.CoreList = CoreList;
CoreList.fragments = {
    key: `CoreListBlockFragment`,
    entry: (0, client_1.gql) `
    fragment CoreListBlockFragment on CoreList {
      attributes {
        anchor
        backgroundColor
        className
        fontFamily
        fontSize
        gradient
        lock
        ordered
        reversed
        start
        style
        textColor
        type
        values
        cssClassName
      }
    }
  `,
};
CoreList.config = {
    name: 'CoreList',
};
CoreList.displayName = 'CoreList';
