"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreHeading = void 0;
const client_1 = require("@apollo/client");
const react_1 = __importDefault(require("react"));
const WordPressBlocksProvider_js_1 = require("../components/WordPressBlocksProvider.js");
const index_js_1 = require("../utils/index.js");
function CoreHeading(props) {
    var _a;
    const theme = (0, WordPressBlocksProvider_js_1.useBlocksTheme)();
    const style = (0, index_js_1.getStyles)(theme, Object.assign({}, props));
    const { attributes } = props;
    const level = `h${(_a = attributes === null || attributes === void 0 ? void 0 : attributes.level) !== null && _a !== void 0 ? _a : 1}`;
    const headingProps = {
        style,
        dangerouslySetInnerHTML: { __html: attributes === null || attributes === void 0 ? void 0 : attributes.content },
        id: attributes === null || attributes === void 0 ? void 0 : attributes.anchor,
        className: attributes === null || attributes === void 0 ? void 0 : attributes.cssClassName,
    };
    return react_1.default.createElement(level, headingProps);
}
exports.CoreHeading = CoreHeading;
CoreHeading.fragments = {
    key: `CoreHeadingBlockFragment`,
    entry: (0, client_1.gql) `
    fragment CoreHeadingBlockFragment on CoreHeading {
      attributes {
        align
        anchor
        backgroundColor
        content
        fontFamily
        fontSize
        gradient
        level
        style
        textAlign
        textColor
        cssClassName
      }
    }
  `,
};
CoreHeading.config = {
    name: 'CoreHeading',
};
CoreHeading.displayName = 'CoreHeading';
